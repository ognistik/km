{
	"UID": "53EC3205-7EE0-4515-84A0-BC1C2FB113AC",
	"CreationDate": 750374497.744676,
	"ModificationDate": 776457611.080266,
	"Triggers": [
		{
			"MacroTriggerType": "Folder",
			"Interest": {
				"ObserveWhen": "WaitCompletion",
				"UID2": "0ED15635-58A0-4272-B0A8-FEF60DDF2969",
				"Observe": "Add",
				"Path": "~/Library/Mobile Documents/iCloud~com~openplanetsoftware~just-press-record/Documents"
			}
		}
	],
	"IsActive": false,
	"Actions": [
		{
			"MacroActionType": "Comment",
			"Title": "Notes",
			"ActionName": "“VERSION & INSTRUCTIONS”",
			"ActionUID": 15543308,
			"IsDisclosed": false,
			"ActionColor": "Aqua",
			"StyledText": "\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\tcnRmZAAAAAADAAAAAgAA\n\t\t\t\t\t\t\tAAcAAABUWFQucnRmAQAA\n\t\t\t\t\t\t\tAC4/CQAAKwAAAAEAAAA3\n\t\t\t\t\t\t\tCQAAe1xydGYxXGFuc2lc\n\t\t\t\t\t\t\tYW5zaWNwZzEyNTJcY29j\n\t\t\t\t\t\t\tb2FydGYyODE4Clxjb2Nv\n\t\t\t\t\t\t\tYXRleHRzY2FsaW5nMFxj\n\t\t\t\t\t\t\tb2NvYXBsYXRmb3JtMHtc\n\t\t\t\t\t\t\tZm9udHRibFxmMFxmc3dp\n\t\t\t\t\t\t\tc3NcZmNoYXJzZXQwIEhl\n\t\t\t\t\t\t\tbHZldGljYTt9CntcY29s\n\t\t\t\t\t\t\tb3J0Ymw7XHJlZDI1NVxn\n\t\t\t\t\t\t\tcmVlbjI1NVxibHVlMjU1\n\t\t\t\t\t\t\tO1xyZWQwXGdyZWVuMFxi\n\t\t\t\t\t\t\tbHVlMDt9CntcKlxleHBh\n\t\t\t\t\t\t\tbmRlZGNvbG9ydGJsOztc\n\t\t\t\t\t\t\tY3NzcmdiXGMwXGMwXGMw\n\t\t\t\t\t\t\tXGM4NDcwNlxjbmFtZSBj\n\t\t\t\t\t\t\tb250cm9sVGV4dENvbG9y\n\t\t\t\t\t\t\tO30KXHBhcmRcdHg1NjBc\n\t\t\t\t\t\t\tdHgxMTIwXHR4MTY4MFx0\n\t\t\t\t\t\t\teDIyNDBcdHgyODAwXHR4\n\t\t\t\t\t\t\tMzM2MFx0eDM5MjBcdHg0\n\t\t\t\t\t\t\tNDgwXHR4NTA0MFx0eDU2\n\t\t\t\t\t\t\tMDBcdHg2MTYwXHR4Njcy\n\t\t\t\t\t\t\tMFxwYXJkaXJuYXR1cmFs\n\t\t\t\t\t\t\tXHBhcnRpZ2h0ZW5mYWN0\n\t\t\t\t\t\t\tb3IwCgpcZjBcZnMyNiBc\n\t\t\t\t\t\t\tY2YyIHYxLjAuMSAtIDIw\n\t\t\t\t\t\t\tMjQvMTAvMjJcCioqKioq\n\t\t\t\t\t\t\tKioqKioqKioqKioqKioq\n\t\t\t\t\t\t\tXApUaGlzIE1hY3JvIGlz\n\t\t\t\t\t\t\tIG1lYW50IHRvIGJlIHVz\n\t\t\t\t\t\t\tZWQgd2l0aCBpdHMgYWNj\n\t\t\t\t\t\t\tb21wYW55aW5nIFNob3J0\n\t\t\t\t\t\t\tY3V0IGFuZCB3aXRoIEp1\n\t\t\t\t\t\t\tc3QgUHJlc3MgUmVjb3Jk\n\t\t\t\t\t\t\tIGFwcC4gSWYgc29tZXRo\n\t\t\t\t\t\t\taW5nIGlzIG5vdCB3b3Jr\n\t\t\t\t\t\t\taW5nIHByb3Blcmx5LCB0\n\t\t\t\t\t\t\taGVyZSBtYXkgYmUgYSBu\n\t\t\t\t\t\t\tZXdlciB2ZXJzaW9uIG9m\n\t\t\t\t\t\t\tIGVpdGhlciB0aGUgbWFj\n\t\t\t\t\t\t\tcm8gb3IgU2hvcnRjdXQu\n\t\t\t\t\t\t\tIENoZWNrIHRoZSByZXBv\n\t\t\t\t\t\t\tIG9yIHN1Ym1pdCBhbnkg\n\t\t\t\t\t\t\taXNzdWVzIGF0OiB7XGZp\n\t\t\t\t\t\t\tZWxke1wqXGZsZGluc3R7\n\t\t\t\t\t\t\tSFlQRVJMSU5LICJodHRw\n\t\t\t\t\t\t\tczovL2dpdGh1Yi5jb20v\n\t\t\t\t\t\t\tb2duaXN0aWsva20tYWkt\n\t\t\t\t\t\t\tbWVtb3MifX17XGZsZHJz\n\t\t\t\t\t\t\tbHQgaHR0cHM6Ly9naXRo\n\t\t\t\t\t\t\tdWIuY29tL29nbmlzdGlr\n\t\t\t\t\t\t\tL2ttLWFpLW1lbW9zfX1c\n\t\t\t\t\t\t\tCioqKioqKioqKioqKioq\n\t\t\t\t\t\t\tKioqKioqXApcCjEuIE1h\n\t\t\t\t\t\t\ta2Ugc3VyZSBkZXRhaWxz\n\t\t\t\t\t\t\tIGFuZCBjb25maWcgaGFz\n\t\t\t\t\t\t\tIGJlZW4gc2V0IHVwIGlu\n\t\t\t\t\t\t\tIHRoZSBTaG9ydGN1dCAo\n\t\t\t\t\t\t\tZG8gbWFrZSBzdXJlIHRv\n\t\t\t\t\t\t\tIHRlc3QgdGhlIFNob3J0\n\t\t\t\t\t\t\tY3V0IGFsb25lIGF0IGxl\n\t\t\t\t\t\t\tYXN0IG9uY2UpLlwKMi4g\n\t\t\t\t\t\t\tVHJpZ2dlciB0aGlzIG1h\n\t\t\t\t\t\t\tY3JvIG9uY2UgdG8gaW5p\n\t\t\t\t\t\t\tdGlhbGl6ZSB0aGUgY3Jl\n\t\t\t\t\t\t\tYXRpb24gb2YgZW1wdHkg\n\t\t\t\t\t\t\tZm9sZGVyICYgZmlsZXMu\n\t\t\t\t\t\t\tXAozLiBUbyBhdm9pZCBp\n\t\t\t\t\t\t\tc3N1ZXMsIGl0IGlzIHN1\n\t\t\t\t\t\t\tZ2dlc3RlZCB5b3Ugcmln\n\t\t\t\t\t\t\taHQgY2xpY2sgYW5kICJL\n\t\t\t\t\t\t\tZWVwIERvd25sb2FkZWQi\n\t\t\t\t\t\t\tIHRoZSBmb2xsb3dpbmdc\n\t\t\t\t\t\t\tCgkqICdKdXN0IFByZXNz\n\t\t\t\t\t\t\tIFJlY29yZCcgZm9sZGVy\n\t\t\t\t\t\t\tIGluIGlDbG91ZCAoTWFj\n\t\t\t\t\t\t\tT1MpXAoJKiAnQUkgTWVt\n\t\t\t\t\t\t\tb3MnIGZvbGRlciBpbiBT\n\t\t\t\t\t\t\taG9ydGN1dHMgZm9sZGVy\n\t\t\t\t\t\t\tIGluIGlDbG91ZCAoQk9U\n\t\t\t\t\t\t\tSCBNYWNPUyBBTkQgaU9T\n\t\t\t\t\t\t\tKVwKNC4gT25jZSB0aGlz\n\t\t\t\t\t\t\tIG1hY3JvIGhhcyBpbml0\n\t\t\t\t\t\t\taWFsaXplZCB0aGUgZm9s\n\t\t\t\t\t\t\tZGVyICYgZmlsZXMsIGl0\n\t\t\t\t\t\t\tIGlzIHN1Z2dlc3RlZCB0\n\t\t\t\t\t\t\tbyBiZSBzZXQgd2l0aCBh\n\t\t\t\t\t\t\tIEZvbGRlciB0cmlnZ2Vy\n\t\t\t\t\t\t\tLCB3YXRjaGluZyB0aGUg\n\t\t\t\t\t\t\tSnVzdCBQcmVzcyBSZWNv\n\t\t\t\t\t\t\tcmQgZm9sZGVyIGZvciBu\n\t\t\t\t\t\t\tZXcgZmlsZXMgKGlnbm9y\n\t\t\t\t\t\t\tZSBwYXJ0aWFsIGFuZCBj\n\t\t\t\t\t\t\taGFuZ2luZyBmaWxlcyku\n\t\t\t\t\t\t\tIEFsc28sIGhhdmluZyB5\n\t\t\t\t\t\t\tb3VyIApcZnMyOCBcY2Yw\n\t\t\t\t\t\t\tIFxDb2NvYUxpZ2F0dXJl\n\t\t\t\t\t\t\tMCBNYWMgYXdha2UgZm9y\n\t\t\t\t\t\t\tIG5ldHdvcmsgYWNjZXNz\n\t\t\t\t\t\t\tIGlzIGdvb2QgaWRlYS4K\n\t\t\t\t\t\t\tXGZzMjYgXGNmMiBcQ29j\n\t\t\t\t\t\t\tb2FMaWdhdHVyZTEgXAo1\n\t\t\t\t\t\t\tLiBUaGlzIG1hY3JvIGNh\n\t\t\t\t\t\t\tbiBhbHNvIGJlIHRyaWdn\n\t\t\t\t\t\t\tZXJlZCBpbmRlcGVuZGVu\n\t\t\t\t\t\t\tdGx5IHRvIHByb2Nlc3Mg\n\t\t\t\t\t\t\tYW55IGF1ZGlvIGZpbGVz\n\t\t\t\t\t\t\tIGluIGNhc2UgdGhlIEZv\n\t\t\t\t\t\t\tbGRlciB0cmlnZ2VyIGRv\n\t\t\t\t\t\t\tZXNuJ3Qgd29yayBwcm9w\n\t\t\t\t\t\t\tZXJseS5cCjYuIElmIHRo\n\t\t\t\t\t\t\tZSBGb2xkZXIgdHJpZ2dl\n\t\t\t\t\t\t\tciBpdCdzIG5vdCB3b3Jr\n\t\t\t\t\t\t\taW5nIHByb3Blcmx5LCBp\n\t\t\t\t\t\t\tdCBpcyBwb3NzaWJsZSBp\n\t\t\t\t\t\t\tdCBpcyBkdWUgdG8gc2xv\n\t\t\t\t\t\t\tdyBvciB1bnN0YWJsZSBX\n\t\t\t\t\t\t\taWZpIGNvbm5lY3Rpb24u\n\t\t\t\t\t\t\tIEluIHN1Y2ggYSBjYXNl\n\t\t\t\t\t\t\tIHlvdSBjYW4gcmFpc2Ug\n\t\t\t\t\t\t\tdGhlIGxvY2FsV2FpdFRp\n\t\t\t\t\t\t\tbWUgdmFyaWFibGUuIE9u\n\t\t\t\t\t\t\tIHRoZSBvdGhlciBoYW5k\n\t\t\t\t\t\t\tLCBpZiB5b3UgZmVlbCB0\n\t\t\t\t\t\t\taGUgcHJvY2Vzc2luZyBp\n\t\t\t\t\t\t\tcyB0b28gc2xvdyBBTkQg\n\t\t\t\t\t\t\teW91ciBmaWxlcyBhcmUg\n\t\t\t\t\t\t\tc3luY2luZyBmYXN0IHRo\n\t\t\t\t\t\t\tcm91Z2ggaUNsb3VkLCB5\n\t\t\t\t\t\t\tb3UgY2FuIGxvd2VyIGl0\n\t\t\t\t\t\t\tIChJIHN1Z2dlc3QgeW91\n\t\t\t\t\t\t\tIGdvIG5vIGxvd2VyIHRo\n\t\t\t\t\t\t\tYW4gNSkuXAo3LiBJdCBp\n\t\t\t\t\t\t\tcyBzdWdnZXN0ZWQgdGhh\n\t\t\t\t\t\t\tdCBhIGZldyB0ZXN0cyBh\n\t\t\t\t\t\t\tcmUgcGVyZm9ybWVkIGlu\n\t\t\t\t\t\t\taXRpYWxseS4gU3BlY2lm\n\t\t\t\t\t\t\taWNhbGx5LCB0byBhcHBy\n\t\t\t\t\t\t\tb3ZlIGFueSBwb3B1cHMg\n\t\t\t\t\t\t\tZnJvbSB0aGUgU2hvcnRj\n\t\t\t\t\t\t\tdXRzIGFwcC5cCjguIFRo\n\t\t\t\t\t\t\tZSBhY2NvbXBhbnlpbmcg\n\t\t\t\t\t\t\tU2hvcnRjdXQgaXMgc3Rp\n\t\t\t\t\t\t\tbGwgbmVjZXNzYXJ5IGZv\n\t\t\t\t\t\t\tciB0aGlzIG1hY3JvIHRv\n\t\t\t\t\t\t\tIHdvcmsgcHJvcGVybHks\n\t\t\t\t\t\t\tIGV2ZW4gaWYgeW91IGRl\n\t\t\t\t\t\t\tY2lkZSBub3QgdG8gdXNl\n\t\t\t\t\t\t\tIGl0IGF0IGFsbC5cCjku\n\t\t\t\t\t\t\tIERvbid0IGZvcmdldCB0\n\t\t\t\t\t\t\tbyBzZXR1cCBhbnkgcmVx\n\t\t\t\t\t\t\tdWlyZWQgcmVwbGFjZW1l\n\t\t\t\t\t\t\tbnRzIGluIHRoZSByZXBs\n\t\t\t\t\t\t\tYWNlbWVudHMuanNvbiBm\n\t\t\t\t\t\t\taWxlIGluIHRoZSBBSSBN\n\t\t\t\t\t\t\tZW1vcyBmb2xkZXIgaW4g\n\t\t\t\t\t\t\tdGhlIFNob3J0Y3V0cyBm\n\t\t\t\t\t\t\tb2xkZXIufQEAAAAjAAAA\n\t\t\t\t\t\t\tAQAAAAcAAABUWFQucnRm\n\t\t\t\t\t\t\tEAAAAODFF2e2AQAAAAAA\n\t\t\t\t\t\t\tAAAAAAA=\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\t"
		},
		{
			"MacroActionType": "Semaphore",
			"ActionName": "Semaphore Lock - Allows only one instance of macro to run at a time.",
			"ActionUID": 15542480,
			"IsDisclosed": false,
			"TimeOutAbortsMacro": true,
			"SemaphoreName": "AIMemos",
			"SemaphoreAction": "Lock"
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "“localWaitTime\" in sec. Gives chance to files to sync down before processing. Raise for slow internet. (default at 30)",
			"ActionUID": 15546285,
			"IsDisclosed": false,
			"Variable": "localWaitTime",
			"Text": "30",
			"ActionColor": "Purple"
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "“localParentFolder” -> JustPressRecord Folder",
			"ActionUID": 15543702,
			"IsDisclosed": false,
			"Variable": "localParentFolder",
			"Text": "Library/Mobile Documents/iCloud~com~openplanetsoftware~just-press-record/Documents",
			"ActionColor": "Yellow"
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "“localAIMemosFolder” -> AI Memos Folder inside Shortcuts Folder",
			"ActionUID": 15543747,
			"IsDisclosed": false,
			"Variable": "localAIMemosFolder",
			"Text": "Library/Mobile Documents/iCloud~is~workflow~my~workflows/Documents/AIMemos",
			"ActionColor": "Yellow"
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "“localProcessedFolder” -> History Folder (no need to change)",
			"IsDisclosed": false,
			"Variable": "localProcessedFolder",
			"Text": "%localAIMemosFolder%/history",
			"ActionUID": 15543703
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "Depending on whether list.txt exists or not, this script will create the necessary files.",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"Source": "Nothing",
			"Variable": "localList",
			"IncludeStdErr": false,
			"ActionUID": 15543749,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "AppendVar",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "TARGET_DIR=\"$HOME/$KMVAR_localAIMemosFolder\"\nhistory_dir=\"$HOME/$KMVAR_localAIMemosFolder/history\"\nlist_file=\"$TARGET_DIR/list.txt\"\n\nif [ ! -f \"$list_file\" ]; then\n    mkdir -p \"$history_dir\"\n    mkdir -p \"$TARGET_DIR\"\n    touch \"$list_file\"\n    touch \"$TARGET_DIR/mode.txt\"\n    touch \"$TARGET_DIR/paused.txt\"\n    printf \"\" > \"$list_file\"\n    printf \"\" > \"$TARGET_DIR/mode.txt\"\n    printf \"\" > \"$TARGET_DIR/paused.txt\"\n    echo \"new\"\nelse\n    echo \"read\"\nfi"
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "If files already exist, read its values. If not, make sure to also create JSON file for replacements BEFORE CANCELING.",
			"ActionUID": 15543741,
			"IsDisclosed": false,
			"ElseActions": [
				{
					"MacroActionType": "WriteFile",
					"Append": false,
					"Format2": "PlainText",
					"Format": "PlainText",
					"IsDisclosed": false,
					"Destination": "~/%localAIMemosFolder%/replacements.json",
					"Encoding": "UTF8",
					"ActionUID": 15546255,
					"Source": "Text",
					"Text": "{\n\t\"word1\": \"word one\",\n\t\"word2\": \"word two\",\n\t\"word3\": \"word three\"\n}"
				},
				{
					"MacroActionType": "Cancel",
					"ActionUID": 15546256,
					"Action": "CancelThisMacro"
				}
			],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "read",
						"Variable": "localList",
						"VariableConditionType": "Is"
					}
				]
			},
			"ThenActions": [
				{
					"MacroActionType": "ReadFile",
					"Source": "~/%localAIMemosFolder%/list.txt",
					"Variable": "localAIMem",
					"Destination": "Variable",
					"ActionUID": 15543742
				},
				{
					"MacroActionType": "ReadFile",
					"Source": "~/%localAIMemosFolder%/mode.txt",
					"Variable": "localMode",
					"Destination": "Variable",
					"ActionUID": 15543743
				},
				{
					"MacroActionType": "ReadFile",
					"Source": "~/%localAIMemosFolder%/paused.txt",
					"Variable": "localPaused",
					"Destination": "Variable",
					"ActionUID": 15545375
				},
				{
					"MacroActionType": "ReadFile",
					"Source": "~/%localAIMemosFolder%/replacements.json",
					"Variable": "localReplacements",
					"Destination": "Variable",
					"ActionUID": 15546254
				}
			]
		},
		{
			"MacroActionType": "ExecuteShortcut",
			"ActionName": "Run Shortcut and get user data.",
			"SourceText": "{\"cmd\": \"getData\"}",
			"TrimResults": true,
			"Source": "Text",
			"Shortcut": "AI Memos",
			"IncludeStdErr": false,
			"Variable": "localDictionary",
			"ActionUID": 15543751,
			"TimeOutAbortsMacro": true,
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"ExecuteOrEdit": "Execute"
		},
		{
			"MacroActionType": "Group",
			"ActionName": "Read dictionary received from Shortcut",
			"Actions": [
				{
					"MacroActionType": "SetVariableToText",
					"IsDisclosed": false,
					"Variable": "localToken",
					"Text": "%JSONValue%localDictionary.theToken%",
					"ActionUID": 15543284
				},
				{
					"MacroActionType": "SetVariableToText",
					"IsDisclosed": false,
					"Variable": "localAntToken",
					"Text": "%JSONValue%localDictionary.theAntToken%",
					"ActionUID": 15547116
				},
				{
					"MacroActionType": "SetVariableToText",
					"IsDisclosed": false,
					"Variable": "localSystemPrompt",
					"Text": "%JSONValue%localDictionary.thePrompt%",
					"ActionUID": 15543291
				},
				{
					"MacroActionType": "SetVariableToText",
					"IsDisclosed": false,
					"Variable": "localModel",
					"Text": "%JSONValue%localDictionary.theModel%",
					"ActionUID": 15543293
				},
				{
					"MacroActionType": "SetVariableToText",
					"IsDisclosed": false,
					"Variable": "localHistoryLimit",
					"Text": "%JSONValue%localDictionary.theLimit%",
					"ActionUID": 15546260
				},
				{
					"MacroActionType": "SetVariableToText",
					"Variable": "localWake",
					"Text": "%JSONValue%localDictionary.theWake%",
					"ActionUID": 15547124
				},
				{
					"MacroActionType": "SetVariableToText",
					"IsDisclosed": false,
					"Variable": "localLanguage",
					"Text": "%JSONValue%localDictionary.theLanguage%",
					"ActionUID": 15552003
				}
			],
			"IsDisclosed": false,
			"TimeOutAbortsMacro": true,
			"ActionUID": 15548331
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "History Maintenance - Keep on limit and move back unprocessed files (inside folder by error, slow wifi speed)",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"Source": "Nothing",
			"IncludeStdErr": false,
			"ActionUID": 15546707,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "None",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "#!/bin/bash\n\nprocessed_dir=\"$HOME/$KMVAR_localProcessedFolder\"\nprocessed_limit=\"$KMVAR_localHistoryLimit\"\norigin_folder=\"$HOME/$KMVAR_localParentFolder\"\n\n# Function to move a file or folder to trash using osascript\nmove_to_trash() {\n    osascript -e \"tell application \\\"Finder\\\" to delete POSIX file \\\"$1\\\"\"\n}\n\n# Function to move folder with audio files to origin_folder\nmove_audio_folder() {\n    local folder=\"$1\"\n    local base_name=$(basename \"$folder\")\n    local target=\"$origin_folder/$base_name\"\n    local counter=1\n\n    while [ -d \"$target\" ]; do\n        target=\"${origin_folder}/${base_name}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$folder\" \"$target\"\n}\n\n# First, move subfolders containing audio files to origin_folder\nfind \"$processed_dir\" -mindepth 1 -type d -print0 | while IFS= read -r -d '' folder; do\n    if [ \"$(find \"$folder\" -maxdepth 1 -type f \\( -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.aif\" -o -name \"*.mp3\" \\) | wc -l)\" -gt 0 ]; then\n        move_audio_folder \"$folder\"\n    fi\ndone\n\n# If processed_limit is 0, trash all files and empty folders in the directory\nif [ \"$processed_limit\" -eq 0 ]; then\n    find \"$processed_dir\" -type f -print0 | while IFS= read -r -d '' file; do\n        move_to_trash \"$file\"\n    done\n    find \"$processed_dir\" -type d -empty -print0 | while IFS= read -r -d '' folder; do\n        move_to_trash \"$folder\"\n    done\nelse\n    # Add 1 to processed_limit when it's not 0\n    adjusted_limit=$((processed_limit + 1))\n\n    # Process files\n    file_count=$(find \"$processed_dir\" -maxdepth 1 -type f | wc -l)\n    if [ \"$file_count\" -gt \"$adjusted_limit\" ]; then\n        excess=$((file_count - adjusted_limit))\n        find \"$processed_dir\" -maxdepth 1 -type f -print0 | \\\n        xargs -0 ls -t | \\\n        tail -n \"$excess\" | \\\n        while read -r file; do\n            move_to_trash \"$file\"\n        done\n    fi\n\n    # Process folders\n    folder_count=$(find \"$processed_dir\" -mindepth 1 -maxdepth 1 -type d | wc -l)\n    if [ \"$folder_count\" -gt \"$processed_limit\" ]; then\n        excess=$((folder_count - processed_limit))\n        find \"$processed_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | \\\n        xargs -0 ls -dt | \\\n        tail -n \"$excess\" | \\\n        while read -r folder; do\n            move_to_trash \"$folder\"\n        done\n    fi\nfi"
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for X seconds.",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"StopOnFailure": false,
			"Source": "Nothing",
			"Variable": "localFile",
			"IncludeStdErr": false,
			"ActionUID": 15546693,
			"UseText": true,
			"TrimResultsNew": true,
			"ActionColor": "Magenta",
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "Cancel Macro if no files found. Otherwise, rename file and gather details.",
			"ActionUID": 15543310,
			"IsDisclosed": false,
			"ElseActions": [
				{
					"MacroActionType": "GetFileAttribute",
					"Attribute": "Parent",
					"Path": "%localFile%",
					"Variable": "localFileParent",
					"ActionUID": 15545341
				},
				{
					"MacroActionType": "GetFileAttribute",
					"Attribute": "Extension",
					"Path": "%localFile%",
					"Variable": "localFileExtension",
					"ActionUID": 15545348
				},
				{
					"MacroActionType": "ExecuteShellScript",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"Source": "Nothing",
					"Variable": "localNewName",
					"IncludeStdErr": false,
					"ActionUID": 15545338,
					"UseText": true,
					"TrimResultsNew": true,
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "AppendVar",
					"HonourFailureSettings": true,
					"Text": "#!/bin/bash\n\n# File path stored in a variable\nfile_path=\"$KMVAR_localFile\"\n\n# Get file creation (birth time) using stat\ncreation_time=$(stat -f \"%SB\" -t \"%y%m%d_%H%M%S\" \"$file_path\")\n\n# Echo the creation time in the requested format\necho \"$creation_time\""
				},
				{
					"MacroActionType": "File",
					"NotifyOnFailure": false,
					"Source": "%localFile%",
					"Operation": "OnlyRename",
					"Destination": "%localNewName%.%localFileExtension%",
					"ActionUID": 15545339
				},
				{
					"MacroActionType": "SetVariableToText",
					"Variable": "localFile",
					"Text": "%localFileParent%/%localNewName%.%localFileExtension%",
					"ActionUID": 15545340
				}
			],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "",
						"Variable": "localFile",
						"VariableConditionType": "Is"
					}
				]
			},
			"ThenActions": [
				{
					"MacroActionType": "Cancel",
					"ActionUID": 15543311,
					"Action": "CancelThisMacro"
				}
			]
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "Transcription Request - Depending on Language",
			"ActionUID": 15552004,
			"IsDisclosed": false,
			"ElseActions": [
				{
					"MacroActionType": "ExecuteShellScript",
					"ActionName": "Transcription Request",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"Source": "Nothing",
					"Variable": "localTranscription",
					"IncludeStdErr": false,
					"ActionUID": 15552005,
					"UseText": true,
					"TrimResultsNew": true,
					"ActionColor": "Red",
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "Variable",
					"HonourFailureSettings": true,
					"Text": "#!/bin/bash\n\nfilePath=\"$KMVAR_localFile\"\nAPIToken_OAI=\"$KMVAR_localToken\"\nwhisperPrompt=\"Please, transcribe the given text.\"\nwhisperLanguage=\"$KMVAR_localLanguage\"\n\n# Process each file path for transcription\n    response=$(curl -X POST \"https://api.openai.com/v1/audio/transcriptions\" \\\n        -H \"Authorization: Bearer $APIToken_OAI\" \\\n        -H \"Content-Type: multipart/form-data\" \\\n        -F \"model=whisper-1\" \\\n        -F \"prompt=$whisperPrompt\" \\\n\t-F \"language=$whisperLanguage\" \\\n        -F \"file=@$filePath\")\n\n    echo \"$response\""
				}
			],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "",
						"Variable": "localLanguage",
						"VariableConditionType": "Is"
					}
				]
			},
			"ThenActions": [
				{
					"MacroActionType": "ExecuteShellScript",
					"ActionName": "Transcription Request",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"Source": "Nothing",
					"Variable": "localTranscription",
					"IncludeStdErr": false,
					"ActionUID": 15542482,
					"UseText": true,
					"TrimResultsNew": true,
					"ActionColor": "Red",
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "Variable",
					"HonourFailureSettings": true,
					"Text": "#!/bin/bash\n\nfilePath=\"$KMVAR_localFile\"\nAPIToken_OAI=\"$KMVAR_localToken\"\nwhisperPrompt=\"Please, transcribe the given text.\"\n\n# Process each file path for transcription\n    response=$(curl -X POST \"https://api.openai.com/v1/audio/transcriptions\" \\\n        -H \"Authorization: Bearer $APIToken_OAI\" \\\n        -H \"Content-Type: multipart/form-data\" \\\n        -F \"model=whisper-1\" \\\n        -F \"prompt=$whisperPrompt\" \\\n        -F \"file=@$filePath\")\n\n    echo \"$response\""
				}
			]
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "Extract Transcription from JSON",
			"IsDisclosed": false,
			"Variable": "localTranscription",
			"Text": "%JSONValue%localTranscription.text%",
			"ActionUID": 15543287
		},
		{
			"MacroActionType": "ExecuteJavaScriptForAutomation",
			"ActionName": "Text Replacements on Transcription",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"StopOnFailure": false,
			"Variable": "localTranscription",
			"IncludeStdErr": false,
			"UseModernSyntax": false,
			"ActionUID": 15547132,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "(function(inDesignMode, designModeParams) {\n    'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n    function getKMVariable(name, required) {\n        var result = undefined;\n        if (inDesignMode && designModeParams)\n            result = designModeParams[name];\n        if (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        if (required && !result)\n            throw new Error(\"Variable '\" + name + \"' is empty\");\n        return result;\n    }\n\n    function replaceWords(theDictionary, theText) {\n        // Parse the JSON string into an object\n        const dictionary = JSON.parse(theDictionary);\n\n        // Sort keys by length in descending order to replace longer phrases first\n        const sortedKeys = Object.keys(dictionary).sort((a, b) => b.length - a.length);\n\n        // Replace words in the text\n        let result = theText;\n        for (const key of sortedKeys) {\n            const regex = new RegExp(`\\\\b${key}\\\\b`, 'g');\n            result = result.replace(regex, match => {\n                const replacement = dictionary[key];\n                // Preserve the case of the original word\n                if (match === match.toUpperCase()) return replacement.toUpperCase();\n                if (match[0] === match[0].toUpperCase()) return replacement.charAt(0).toUpperCase() + replacement.slice(1).toLowerCase();\n                return replacement.toLowerCase();\n            });\n        }\n\n        return result;\n    }\n\n    function escapeString(str) {\n        str = str.replace(/[\\u201C\\u201D]/g, '\"');\n        return JSON.stringify(str).slice(1, -1);\n    }\n\n    function execute() {\n        const theDictionary = getKMVariable(\"localReplacements\", true);\n        const localTranscription = getKMVariable(\"localTranscription\", true);\n\n        // Perform word replacements\n        return replaceWords(theDictionary, localTranscription);\n\n        // Escape the resulting string\n        // return escapeString(replacedText);\n    }\n\n    try {\n        return execute();\n    } catch (e) {\n        return \"Error on line: \" + e.line + \": \" + e.message;\n    }\n\n})(false);",
			"NotifyOnFailure": false
		},
		{
			"MacroActionType": "Group",
			"ActionName": "VOICE ACTIONS",
			"ActionUID": 15548330,
			"IsDisclosed": false,
			"Actions": [
				{
					"MacroActionType": "IfThenElse",
					"ActionName": "START LIST Action",
					"ActionUID": 15545317,
					"IsDisclosed": false,
					"ElseActions": [],
					"ActionColor": "Green",
					"TimeOutAbortsMacro": true,
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "(?i)^Start list|(?i)^start\\. list",
								"Variable": "localTranscription",
								"VariableConditionType": "Matches"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "SearchReplace",
							"Search": "^Start list[^a-zA-Z]?\\s*|^Start\\. list[^a-zA-Z]?\\s*",
							"Source": "Variable",
							"Variable": "localTranscription",
							"Action": "IgnoreCaseRegEx",
							"ActionUID": 15545321,
							"Replace": "",
							"Which": "All"
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "IF - Condition to RESUME if there's a paused list",
							"ActionUID": 15548728,
							"IsDisclosed": false,
							"ElseActions": [],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localPaused",
										"VariableConditionType": "IsNot"
									}
								]
							},
							"ElseActionListDisclosed": false,
							"ThenActions": [
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/list.txt",
									"Encoding": "UTF8",
									"ActionUID": 15548729,
									"Source": "Text",
									"Text": "%localPaused%"
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localAIMem",
									"Text": "%localPaused%",
									"ActionUID": 15548730
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/paused.txt",
									"Encoding": "UTF8",
									"ActionUID": 15548731,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localPaused",
									"Text": "",
									"ActionUID": 15548732
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/mode.txt",
									"Encoding": "UTF8",
									"ActionUID": 15548733,
									"Source": "Text",
									"Text": "list"
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localMode",
									"Text": "list",
									"ActionUID": 15548734
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "If - Condition to Start list if not in list mode already",
							"ActionUID": 15548735,
							"IsDisclosed": false,
							"ElseActions": [],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localMode",
										"VariableConditionType": "Is"
									}
								]
							},
							"ElseActionListDisclosed": false,
							"ThenActions": [
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/mode.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545322,
									"Source": "Text",
									"Text": "list"
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localMode",
									"Text": "list",
									"ActionUID": 15545350
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ElseActions": [],
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localTranscription",
										"VariableConditionType": "Is"
									}
								]
							},
							"ThenActions": [
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Move file to processed folder",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"Source": "Nothing",
									"IncludeStdErr": false,
									"ActionUID": 15546294,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Window",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\ntheFile=\"$KMVAR_localFile\"\nprocessedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n\n# Get the base filename and extension\nfilename=$(basename -- \"$theFile\")\nextension=\"${filename##*.}\"\nfilename=\"${filename%.*}\"\n\n# Initialize counter\ncounter=1\n\n# Destination path\ndestPath=\"$processedDir/$filename.$extension\"\n\n# Check if file already exists and increment counter if needed\nwhile [[ -e \"$destPath\" ]]; do\n    destPath=\"$processedDir/$filename-$counter.$extension\"\n    ((counter++))\ndone\n\n# Move the file\nmv \"$theFile\" \"$destPath\""
								},
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for 10 seconds.",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Source": "Nothing",
									"Variable": "localFile",
									"IncludeStdErr": false,
									"ActionUID": 15546719,
									"UseText": true,
									"TrimResultsNew": true,
									"ActionColor": "Magenta",
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
								},
								{
									"MacroActionType": "IfThenElse",
									"ActionName": "If files found, process next one. If not found, trash empty directories.",
									"ActionUID": 15545353,
									"IsDisclosed": false,
									"ElseActions": [],
									"TimeOutAbortsMacro": true,
									"Conditions": {
										"ConditionListMatch": "All",
										"ConditionList": [
											{
												"ConditionType": "Variable",
												"VariableValue": "",
												"Variable": "localFile",
												"VariableConditionType": "IsNot"
											}
										]
									},
									"ThenActions": [
										{
											"MacroActionType": "ExecuteMacro",
											"MacroUID": "53EC3205-7EE0-4515-84A0-BC1C2FB113AC",
											"ActionUID": 15545354,
											"IsDisclosed": false,
											"TimeOutAbortsMacro": true,
											"UseParameter": false,
											"Asynchronously": false
										}
									]
								},
								{
									"MacroActionType": "Cancel",
									"IsDisclosed": false,
									"Action": "CancelJustThisMacro",
									"ActionUID": 15545325
								}
							],
							"TimeOutAbortsMacro": true,
							"ActionUID": 15545324
						}
					]
				},
				{
					"MacroActionType": "IfThenElse",
					"ActionName": "PAUSE LIST Action",
					"ActionUID": 15545356,
					"IsDisclosed": false,
					"ElseActions": [],
					"ActionColor": "Green",
					"TimeOutAbortsMacro": true,
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "(?i)^Pause list|(?i)^Pause\\. list",
								"Variable": "localTranscription",
								"VariableConditionType": "Matches"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "SearchReplace",
							"Search": "^Pause list[^a-zA-Z]?\\s*|^Pauselist[^a-zA-Z]?\\s*",
							"Source": "Variable",
							"IsDisclosed": false,
							"Action": "IgnoreCaseRegEx",
							"ActionUID": 15545357,
							"Variable": "localTranscription",
							"Replace": "",
							"Which": "All"
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "IF - Condition to only switch to paused if not already there",
							"ActionUID": 15545376,
							"IsDisclosed": false,
							"ElseActions": [],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localPaused",
										"VariableConditionType": "Is"
									}
								]
							},
							"ElseActionListDisclosed": false,
							"ThenActions": [
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/paused.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545367,
									"Source": "Text",
									"Text": "%localAIMem%"
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localPaused",
									"Text": "%localAIMem%",
									"ActionUID": 15545377
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/list.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545368,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localAIMem",
									"Text": "",
									"ActionUID": 15545369
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/mode.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545358,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localMode",
									"Text": "",
									"ActionUID": 15545359
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionUID": 15545360,
							"IsDisclosed": false,
							"TimeOutAbortsMacro": true,
							"ElseActions": [],
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localTranscription",
										"VariableConditionType": "Is"
									}
								]
							},
							"ThenActions": [
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Move file to processed folder",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"Source": "Nothing",
									"IncludeStdErr": false,
									"ActionUID": 15546295,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Window",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\ntheFile=\"$KMVAR_localFile\"\nprocessedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n\n# Get the base filename and extension\nfilename=$(basename -- \"$theFile\")\nextension=\"${filename##*.}\"\nfilename=\"${filename%.*}\"\n\n# Initialize counter\ncounter=1\n\n# Destination path\ndestPath=\"$processedDir/$filename.$extension\"\n\n# Check if file already exists and increment counter if needed\nwhile [[ -e \"$destPath\" ]]; do\n    destPath=\"$processedDir/$filename-$counter.$extension\"\n    ((counter++))\ndone\n\n# Move the file\nmv \"$theFile\" \"$destPath\""
								},
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for 10 seconds.",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Source": "Nothing",
									"Variable": "localFile",
									"IncludeStdErr": false,
									"ActionUID": 15546720,
									"UseText": true,
									"TrimResultsNew": true,
									"ActionColor": "Magenta",
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
								},
								{
									"MacroActionType": "IfThenElse",
									"ActionName": "If files found, process next one. If not found, trash empty directories.",
									"ActionUID": 15545363,
									"IsDisclosed": false,
									"ElseActions": [],
									"TimeOutAbortsMacro": true,
									"Conditions": {
										"ConditionListMatch": "All",
										"ConditionList": [
											{
												"ConditionType": "Variable",
												"VariableValue": "",
												"Variable": "localFile",
												"VariableConditionType": "IsNot"
											}
										]
									},
									"ThenActions": [
										{
											"MacroActionType": "ExecuteMacro",
											"MacroUID": "53EC3205-7EE0-4515-84A0-BC1C2FB113AC",
											"ActionUID": 15545364,
											"IsDisclosed": false,
											"TimeOutAbortsMacro": true,
											"UseParameter": false,
											"Asynchronously": false
										}
									]
								},
								{
									"MacroActionType": "Cancel",
									"IsDisclosed": false,
									"Action": "CancelJustThisMacro",
									"ActionUID": 15545366
								}
							]
						}
					]
				},
				{
					"MacroActionType": "IfThenElse",
					"ActionName": "RESUME LIST Action",
					"ActionUID": 15545378,
					"IsDisclosed": false,
					"ElseActions": [],
					"ActionColor": "Green",
					"TimeOutAbortsMacro": true,
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "(?i)^Resume list|(?i)^Resume\\. list",
								"Variable": "localTranscription",
								"VariableConditionType": "Matches"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "SearchReplace",
							"Search": "^Resume list[^a-zA-Z]?\\s*|^resume\\. list[^a-zA-Z]?\\s*",
							"Source": "Variable",
							"Variable": "localTranscription",
							"Action": "IgnoreCaseRegEx",
							"ActionUID": 15545379,
							"Replace": "",
							"Which": "All"
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "IF - Condition to only RESUME if not on list already",
							"ActionUID": 15545380,
							"IsDisclosed": false,
							"ElseActions": [],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localMode",
										"VariableConditionType": "Is"
									}
								]
							},
							"ElseActionListDisclosed": false,
							"ThenActions": [
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/list.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545381,
									"Source": "Text",
									"Text": "%localPaused%"
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localAIMem",
									"Text": "%localPaused%",
									"ActionUID": 15545382
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/paused.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545383,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localPaused",
									"Text": "",
									"ActionUID": 15545384
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/mode.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545385,
									"Source": "Text",
									"Text": "list"
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localMode",
									"Text": "list",
									"ActionUID": 15545386
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionUID": 15545387,
							"IsDisclosed": false,
							"TimeOutAbortsMacro": true,
							"ElseActions": [],
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localTranscription",
										"VariableConditionType": "Is"
									}
								]
							},
							"ThenActions": [
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Move file to processed folder",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"Source": "Nothing",
									"IncludeStdErr": false,
									"ActionUID": 15546296,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Window",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\ntheFile=\"$KMVAR_localFile\"\nprocessedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n\n# Get the base filename and extension\nfilename=$(basename -- \"$theFile\")\nextension=\"${filename##*.}\"\nfilename=\"${filename%.*}\"\n\n# Initialize counter\ncounter=1\n\n# Destination path\ndestPath=\"$processedDir/$filename.$extension\"\n\n# Check if file already exists and increment counter if needed\nwhile [[ -e \"$destPath\" ]]; do\n    destPath=\"$processedDir/$filename-$counter.$extension\"\n    ((counter++))\ndone\n\n# Move the file\nmv \"$theFile\" \"$destPath\""
								},
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for 10 seconds.",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Source": "Nothing",
									"Variable": "localFile",
									"IncludeStdErr": false,
									"ActionUID": 15546721,
									"UseText": true,
									"TrimResultsNew": true,
									"ActionColor": "Magenta",
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
								},
								{
									"MacroActionType": "IfThenElse",
									"ActionName": "If files found, process next one. If not found, trash empty directories.",
									"ActionUID": 15545390,
									"IsDisclosed": false,
									"ElseActions": [],
									"TimeOutAbortsMacro": true,
									"Conditions": {
										"ConditionListMatch": "All",
										"ConditionList": [
											{
												"ConditionType": "Variable",
												"VariableValue": "",
												"Variable": "localFile",
												"VariableConditionType": "IsNot"
											}
										]
									},
									"ThenActions": [
										{
											"MacroActionType": "ExecuteMacro",
											"UseParameter": false,
											"MacroUID": "53EC3205-7EE0-4515-84A0-BC1C2FB113AC",
											"TimeOutAbortsMacro": true,
											"Asynchronously": false,
											"ActionUID": 15545391
										}
									]
								},
								{
									"MacroActionType": "Cancel",
									"ActionUID": 15545393,
									"Action": "CancelJustThisMacro"
								}
							]
						}
					]
				},
				{
					"MacroActionType": "IfThenElse",
					"ActionName": "PROCESS LIST",
					"ActionUID": 15545394,
					"IsDisclosed": false,
					"ElseActions": [],
					"ActionColor": "Green",
					"TimeOutAbortsMacro": true,
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "(?i)^Process list|(?i)^Process\\. list",
								"Variable": "localTranscription",
								"VariableConditionType": "Matches"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "SearchReplace",
							"Search": "^Process list[^a-zA-Z]?\\s*|^process\\. list[^a-zA-Z]?\\s*",
							"Source": "Variable",
							"Variable": "localTranscription",
							"Action": "IgnoreCaseRegEx",
							"ActionUID": 15545395,
							"Replace": "",
							"Which": "All"
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "IF - Condition to only PROCESS if there's a list",
							"ActionUID": 15545396,
							"IsDisclosed": false,
							"ElseActions": [],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localAIMem",
										"VariableConditionType": "IsNot"
									}
								]
							},
							"ElseActionListDisclosed": false,
							"ThenActions": [
								{
									"MacroActionType": "ExecuteJavaScriptForAutomation",
									"ActionName": "Escape Memo",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Variable": "localAIMem",
									"IncludeStdErr": false,
									"UseModernSyntax": false,
									"ActionUID": 15545457,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "(function(inDesignMode, designModeParams) {\n\t'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n\tfunction getKMVariable(name, required) {\n\t\tvar result = undefined;\n\t\tif (inDesignMode && designModeParams)\n\t\t\tresult = designModeParams[name];\n\t\tif (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        if (required && !result)\n\t\t\tthrow new Error(\"Variable '\" + name + \"' is empty\");\n\t\treturn result;\n\t}\n\t// #endregion\n\nfunction execute() {\n    var str = getKMVariable(\"localAIMem\", true);\n    str = str.replace(/[\\u201C\\u201D]/g, '\"');\n    return JSON.stringify(str).slice(1, -1);\n}\n\n\ttry {\n\t\treturn execute();\n\t} catch (e) {\n\t\treturn \"Error on line: \" + e.line + \": \" + e.message;\n\t}\n\n})(false);",
									"NotifyOnFailure": false
								},
								{
									"MacroActionType": "ExecuteJavaScriptForAutomation",
									"ActionName": "Escape Raw",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Variable": "localUserPrompt",
									"IncludeStdErr": false,
									"UseModernSyntax": false,
									"ActionUID": 15547543,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "(function(inDesignMode, designModeParams) {\n    'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n    function getKMVariable(name) {\n        var result;\n        if (inDesignMode && designModeParams)\n            result = designModeParams[name];\n        if (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        return result || '';\n    }\n\n    function execute() {\n        var str = getKMVariable(\"localUserPrompt\");\n        if (!str) return '';\n        str = str.replace(/[\\u201C\\u201D]/g, '\"');\n        return JSON.stringify(str).slice(1, -1);\n    }\n\n    try {\n        return execute();\n    } catch (e) {\n        return '';\n    }\n\n})(false);",
									"NotifyOnFailure": false
								},
								{
									"MacroActionType": "ExecuteShortcut",
									"ActionUID": 15547523,
									"ExecuteOrEdit": "Execute",
									"IsDisclosed": false,
									"Source": "Text",
									"TimeOutAbortsMacro": true,
									"TrimResults": true,
									"Shortcut": "AI Memos",
									"IncludeStdErr": false,
									"DisplayKind": "None",
									"SourceText": "{\"cmd\": \"process\",\"details\": \"%localNewName%\",\"memo\": \"%localAIMem%\",\"rawMemo\": \"%localUserPrompt%\",\"specialCase\": \"%localSpecialCase%\"}"
								},
								{
									"MacroActionType": "WriteFile",
									"ActionName": "Create new empty list file",
									"Append": false,
									"Format": "PlainText",
									"Format2": "PlainText",
									"Destination": "~/%localAIMemosFolder%/list.txt",
									"ActionUID": 15545412,
									"Encoding": "UTF8",
									"IsDisclosed": false,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localAIMem",
									"Text": "",
									"ActionUID": 15545398
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/mode.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545401,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localMode",
									"Text": "",
									"ActionUID": 15545402
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "IF - Condition to only PROCESS if a paused orphan list is found",
							"ActionUID": 15545413,
							"IsDisclosed": false,
							"ElseActions": [],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localPaused",
										"VariableConditionType": "IsNot"
									}
								]
							},
							"ElseActionListDisclosed": false,
							"ThenActions": [
								{
									"MacroActionType": "ExecuteJavaScriptForAutomation",
									"ActionName": "Escape Paused",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Variable": "localPaused",
									"IncludeStdErr": false,
									"UseModernSyntax": false,
									"ActionUID": 15545463,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "(function(inDesignMode, designModeParams) {\n\t'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n\tfunction getKMVariable(name, required) {\n\t\tvar result = undefined;\n\t\tif (inDesignMode && designModeParams)\n\t\t\tresult = designModeParams[name];\n\t\tif (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        if (required && !result)\n\t\t\tthrow new Error(\"Variable '\" + name + \"' is empty\");\n\t\treturn result;\n\t}\n\t// #endregion\n\nfunction execute() {\n    var str = getKMVariable(\"localPaused\", true);\n    str = str.replace(/[\\u201C\\u201D]/g, '\"');\n    return JSON.stringify(str).slice(1, -1);\n}\n\n\ttry {\n\t\treturn execute();\n\t} catch (e) {\n\t\treturn \"Error on line: \" + e.line + \": \" + e.message;\n\t}\n\n})(false);",
									"NotifyOnFailure": false
								},
								{
									"MacroActionType": "ExecuteJavaScriptForAutomation",
									"ActionName": "Escape Raw",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Variable": "localUserPrompt",
									"IncludeStdErr": false,
									"UseModernSyntax": false,
									"ActionUID": 15547544,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "(function(inDesignMode, designModeParams) {\n    'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n    function getKMVariable(name) {\n        var result;\n        if (inDesignMode && designModeParams)\n            result = designModeParams[name];\n        if (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        return result || '';\n    }\n\n    function execute() {\n        var str = getKMVariable(\"localUserPrompt\");\n        if (!str) return '';\n        str = str.replace(/[\\u201C\\u201D]/g, '\"');\n        return JSON.stringify(str).slice(1, -1);\n    }\n\n    try {\n        return execute();\n    } catch (e) {\n        return '';\n    }\n\n})(false);",
									"NotifyOnFailure": false
								},
								{
									"MacroActionType": "ExecuteShortcut",
									"ActionUID": 15547525,
									"ExecuteOrEdit": "Execute",
									"IsDisclosed": false,
									"Source": "Text",
									"TimeOutAbortsMacro": true,
									"TrimResults": true,
									"Shortcut": "AI Memos",
									"IncludeStdErr": false,
									"DisplayKind": "None",
									"SourceText": "{\"cmd\": \"process\",\"details\": \"%localNewName%_O\",\"memo\": \"%localPaused%\",\"rawMemo\": \"%localUserPrompt%\",\"specialCase\": \"%localSpecialCase%\"}"
								},
								{
									"MacroActionType": "WriteFile",
									"ActionName": "Create new empty paused file",
									"Append": false,
									"Format": "PlainText",
									"Format2": "PlainText",
									"Destination": "~/%localAIMemosFolder%/paused.txt",
									"ActionUID": 15545416,
									"Encoding": "UTF8",
									"IsDisclosed": false,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localPaused",
									"Text": "",
									"ActionUID": 15545418
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/mode.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545419,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localMode",
									"Text": "",
									"ActionUID": 15545420
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionUID": 15545403,
							"IsDisclosed": false,
							"TimeOutAbortsMacro": true,
							"ElseActions": [],
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localTranscription",
										"VariableConditionType": "Is"
									}
								]
							},
							"ThenActions": [
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Move file to processed folder",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"Source": "Nothing",
									"IncludeStdErr": false,
									"ActionUID": 15546297,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Window",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\ntheFile=\"$KMVAR_localFile\"\nprocessedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n\n# Get the base filename and extension\nfilename=$(basename -- \"$theFile\")\nextension=\"${filename##*.}\"\nfilename=\"${filename%.*}\"\n\n# Initialize counter\ncounter=1\n\n# Destination path\ndestPath=\"$processedDir/$filename.$extension\"\n\n# Check if file already exists and increment counter if needed\nwhile [[ -e \"$destPath\" ]]; do\n    destPath=\"$processedDir/$filename-$counter.$extension\"\n    ((counter++))\ndone\n\n# Move the file\nmv \"$theFile\" \"$destPath\""
								},
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for 10 seconds.",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Source": "Nothing",
									"Variable": "localFile",
									"IncludeStdErr": false,
									"ActionUID": 15546722,
									"UseText": true,
									"TrimResultsNew": true,
									"ActionColor": "Magenta",
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
								},
								{
									"MacroActionType": "IfThenElse",
									"ActionName": "If files found, process next one. If not found, trash empty directories.",
									"ActionUID": 15545406,
									"IsDisclosed": false,
									"ElseActions": [],
									"TimeOutAbortsMacro": true,
									"Conditions": {
										"ConditionListMatch": "All",
										"ConditionList": [
											{
												"ConditionType": "Variable",
												"VariableValue": "",
												"Variable": "localFile",
												"VariableConditionType": "IsNot"
											}
										]
									},
									"ThenActions": [
										{
											"MacroActionType": "ExecuteMacro",
											"MacroUID": "53EC3205-7EE0-4515-84A0-BC1C2FB113AC",
											"ActionUID": 15545407,
											"IsDisclosed": false,
											"TimeOutAbortsMacro": true,
											"UseParameter": false,
											"Asynchronously": false
										}
									]
								},
								{
									"MacroActionType": "Cancel",
									"IsDisclosed": false,
									"Action": "CancelJustThisMacro",
									"ActionUID": 15545409
								}
							]
						}
					]
				},
				{
					"MacroActionType": "IfThenElse",
					"ActionName": "CANCEL LIST Action",
					"ActionUID": 15545421,
					"IsDisclosed": false,
					"ElseActions": [],
					"ActionColor": "Green",
					"TimeOutAbortsMacro": true,
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "(?i)^Cancel list|(?i)^Cancel\\. list",
								"Variable": "localTranscription",
								"VariableConditionType": "Matches"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "SearchReplace",
							"Search": "^Cancel list[^a-zA-Z]?\\s*|^cancel\\. list[^a-zA-Z]?\\s*",
							"Source": "Variable",
							"Variable": "localTranscription",
							"Action": "IgnoreCaseRegEx",
							"ActionUID": 15545422,
							"Replace": "",
							"Which": "All"
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "IF - Condition to only CANCEL if list is empty",
							"ActionUID": 15545423,
							"IsDisclosed": false,
							"ElseActions": [],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localAIMem",
										"VariableConditionType": "Is"
									}
								]
							},
							"ElseActionListDisclosed": false,
							"ThenActions": [
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/mode.txt",
									"Encoding": "UTF8",
									"ActionUID": 15545428,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localMode",
									"Text": "",
									"ActionUID": 15545429
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "IF - Condition to only PROCESS if there's a list",
							"ActionUID": 15547526,
							"IsDisclosed": false,
							"ElseActions": [],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localAIMem",
										"VariableConditionType": "IsNot"
									}
								]
							},
							"ElseActionListDisclosed": false,
							"ThenActions": [
								{
									"MacroActionType": "ExecuteJavaScriptForAutomation",
									"ActionName": "Escape Memo",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Variable": "localAIMem",
									"IncludeStdErr": false,
									"UseModernSyntax": false,
									"ActionUID": 15547527,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "(function(inDesignMode, designModeParams) {\n\t'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n\tfunction getKMVariable(name, required) {\n\t\tvar result = undefined;\n\t\tif (inDesignMode && designModeParams)\n\t\t\tresult = designModeParams[name];\n\t\tif (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        if (required && !result)\n\t\t\tthrow new Error(\"Variable '\" + name + \"' is empty\");\n\t\treturn result;\n\t}\n\t// #endregion\n\nfunction execute() {\n    var str = getKMVariable(\"localAIMem\", true);\n    str = str.replace(/[\\u201C\\u201D]/g, '\"');\n    return JSON.stringify(str).slice(1, -1);\n}\n\n\ttry {\n\t\treturn execute();\n\t} catch (e) {\n\t\treturn \"Error on line: \" + e.line + \": \" + e.message;\n\t}\n\n})(false);",
									"NotifyOnFailure": false
								},
								{
									"MacroActionType": "ExecuteJavaScriptForAutomation",
									"ActionName": "Escape Raw",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Variable": "localUserPrompt",
									"IncludeStdErr": false,
									"UseModernSyntax": false,
									"ActionUID": 15547545,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "(function(inDesignMode, designModeParams) {\n    'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n    function getKMVariable(name) {\n        var result;\n        if (inDesignMode && designModeParams)\n            result = designModeParams[name];\n        if (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        return result || '';\n    }\n\n    function execute() {\n        var str = getKMVariable(\"localUserPrompt\");\n        if (!str) return '';\n        str = str.replace(/[\\u201C\\u201D]/g, '\"');\n        return JSON.stringify(str).slice(1, -1);\n    }\n\n    try {\n        return execute();\n    } catch (e) {\n        return '';\n    }\n\n})(false);",
									"NotifyOnFailure": false
								},
								{
									"MacroActionType": "ExecuteShortcut",
									"ActionUID": 15547529,
									"ExecuteOrEdit": "Execute",
									"IsDisclosed": false,
									"Source": "Text",
									"TimeOutAbortsMacro": true,
									"TrimResults": true,
									"Shortcut": "AI Memos",
									"IncludeStdErr": false,
									"DisplayKind": "None",
									"SourceText": "{\"cmd\": \"process\",\"details\": \"%localNewName%\",\"memo\": \"%localAIMem%\",\"rawMemo\": \"%localUserPrompt%\",\"specialCase\": \"%localSpecialCase%\"}"
								},
								{
									"MacroActionType": "WriteFile",
									"ActionName": "Create new empty list file",
									"Append": false,
									"Format": "PlainText",
									"Format2": "PlainText",
									"Destination": "~/%localAIMemosFolder%/list.txt",
									"ActionUID": 15547530,
									"Encoding": "UTF8",
									"IsDisclosed": false,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localAIMem",
									"Text": "",
									"ActionUID": 15547531
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/mode.txt",
									"Encoding": "UTF8",
									"ActionUID": 15547532,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localMode",
									"Text": "",
									"ActionUID": 15547533
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "IF - Condition to only PROCESS if a paused orphan list is found",
							"ActionUID": 15547534,
							"IsDisclosed": false,
							"ElseActions": [],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localPaused",
										"VariableConditionType": "IsNot"
									}
								]
							},
							"ElseActionListDisclosed": false,
							"ThenActions": [
								{
									"MacroActionType": "ExecuteJavaScriptForAutomation",
									"ActionName": "Escape Paused",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Variable": "localPaused",
									"IncludeStdErr": false,
									"UseModernSyntax": false,
									"ActionUID": 15547535,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "(function(inDesignMode, designModeParams) {\n\t'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n\tfunction getKMVariable(name, required) {\n\t\tvar result = undefined;\n\t\tif (inDesignMode && designModeParams)\n\t\t\tresult = designModeParams[name];\n\t\tif (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        if (required && !result)\n\t\t\tthrow new Error(\"Variable '\" + name + \"' is empty\");\n\t\treturn result;\n\t}\n\t// #endregion\n\nfunction execute() {\n    var str = getKMVariable(\"localPaused\", true);\n    str = str.replace(/[\\u201C\\u201D]/g, '\"');\n    return JSON.stringify(str).slice(1, -1);\n}\n\n\ttry {\n\t\treturn execute();\n\t} catch (e) {\n\t\treturn \"Error on line: \" + e.line + \": \" + e.message;\n\t}\n\n})(false);",
									"NotifyOnFailure": false
								},
								{
									"MacroActionType": "ExecuteJavaScriptForAutomation",
									"ActionName": "Escape Raw",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Variable": "localUserPrompt",
									"IncludeStdErr": false,
									"UseModernSyntax": false,
									"ActionUID": 15547546,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "(function(inDesignMode, designModeParams) {\n    'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n    function getKMVariable(name) {\n        var result;\n        if (inDesignMode && designModeParams)\n            result = designModeParams[name];\n        if (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        return result || '';\n    }\n\n    function execute() {\n        var str = getKMVariable(\"localUserPrompt\");\n        if (!str) return '';\n        str = str.replace(/[\\u201C\\u201D]/g, '\"');\n        return JSON.stringify(str).slice(1, -1);\n    }\n\n    try {\n        return execute();\n    } catch (e) {\n        return '';\n    }\n\n})(false);",
									"NotifyOnFailure": false
								},
								{
									"MacroActionType": "ExecuteShortcut",
									"ActionUID": 15547537,
									"ExecuteOrEdit": "Execute",
									"IsDisclosed": false,
									"Source": "Text",
									"TimeOutAbortsMacro": true,
									"TrimResults": true,
									"Shortcut": "AI Memos",
									"IncludeStdErr": false,
									"DisplayKind": "None",
									"SourceText": "{\"cmd\": \"process\",\"details\": \"%localNewName%_O\",\"memo\": \"%localPaused%\",\"rawMemo\": \"%localUserPrompt%\",\"specialCase\": \"%localSpecialCase%\"}"
								},
								{
									"MacroActionType": "WriteFile",
									"ActionName": "Create new empty paused file",
									"Append": false,
									"Format": "PlainText",
									"Format2": "PlainText",
									"Destination": "~/%localAIMemosFolder%/paused.txt",
									"ActionUID": 15547538,
									"Encoding": "UTF8",
									"IsDisclosed": false,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localPaused",
									"Text": "",
									"ActionUID": 15547539
								},
								{
									"MacroActionType": "WriteFile",
									"Append": false,
									"Format2": "PlainText",
									"Format": "PlainText",
									"IsDisclosed": false,
									"Destination": "~/%localAIMemosFolder%/mode.txt",
									"Encoding": "UTF8",
									"ActionUID": 15547540,
									"Source": "Text",
									"Text": ""
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localMode",
									"Text": "",
									"ActionUID": 15547541
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionUID": 15545430,
							"IsDisclosed": false,
							"TimeOutAbortsMacro": true,
							"ElseActions": [],
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localTranscription",
										"VariableConditionType": "Is"
									}
								]
							},
							"ThenActions": [
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Move file to processed folder",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"Source": "Nothing",
									"IncludeStdErr": false,
									"ActionUID": 15546298,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Window",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\ntheFile=\"$KMVAR_localFile\"\nprocessedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n\n# Get the base filename and extension\nfilename=$(basename -- \"$theFile\")\nextension=\"${filename##*.}\"\nfilename=\"${filename%.*}\"\n\n# Initialize counter\ncounter=1\n\n# Destination path\ndestPath=\"$processedDir/$filename.$extension\"\n\n# Check if file already exists and increment counter if needed\nwhile [[ -e \"$destPath\" ]]; do\n    destPath=\"$processedDir/$filename-$counter.$extension\"\n    ((counter++))\ndone\n\n# Move the file\nmv \"$theFile\" \"$destPath\""
								},
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for 10 seconds.",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Source": "Nothing",
									"Variable": "localFile",
									"IncludeStdErr": false,
									"ActionUID": 15546723,
									"UseText": true,
									"TrimResultsNew": true,
									"ActionColor": "Magenta",
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
								},
								{
									"MacroActionType": "IfThenElse",
									"ActionName": "If files found, process next one. If not found, trash empty directories.",
									"ActionUID": 15545433,
									"IsDisclosed": false,
									"ElseActions": [],
									"TimeOutAbortsMacro": true,
									"Conditions": {
										"ConditionListMatch": "All",
										"ConditionList": [
											{
												"ConditionType": "Variable",
												"VariableValue": "",
												"Variable": "localFile",
												"VariableConditionType": "IsNot"
											}
										]
									},
									"ThenActions": [
										{
											"MacroActionType": "ExecuteMacro",
											"MacroUID": "53EC3205-7EE0-4515-84A0-BC1C2FB113AC",
											"ActionUID": 15545434,
											"IsDisclosed": false,
											"TimeOutAbortsMacro": true,
											"UseParameter": false,
											"Asynchronously": false
										}
									]
								},
								{
									"MacroActionType": "Cancel",
									"IsDisclosed": false,
									"Action": "CancelJustThisMacro",
									"ActionUID": 15545436
								}
							]
						}
					]
				},
				{
					"MacroActionType": "IfThenElse",
					"ActionName": "HELP ME Action",
					"ActionUID": 15546263,
					"IsDisclosed": false,
					"ElseActions": [],
					"ActionColor": "Green",
					"TimeOutAbortsMacro": true,
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "(?i)^(%localWake%)",
								"Variable": "localTranscription",
								"VariableConditionType": "Matches"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "SearchReplace",
							"Search": "^(%localWake%)[^a-zA-Z]?\\s*",
							"Source": "Variable",
							"IsDisclosed": false,
							"Action": "IgnoreCaseRegEx",
							"ActionUID": 15546264,
							"Variable": "localTranscription",
							"Replace": "",
							"Which": "All"
						},
						{
							"MacroActionType": "SetVariableToText",
							"IsDisclosed": false,
							"Variable": "localSystemPrompt",
							"Text": "You are a helpful AI assistant. Avoid using superfluous prose, conjunctive adverbs and similar discourse markers, and introductory or concluding statements. \n\nNEVER USE THESE WORDS/PHRASES: delve into; intricate; in summary; underscore; important to note; as an AI language model; streamline; game-changer; and the best part?; and let me tell you; that's where ___ comes in; thrilled; \n\nDon't repeat the user's query in your response. Just perform the task without any additional comments and give the result. NEVER mention your knowledge cutoff. NEVER reveal yourself as an AI or language model. Follow these instructions unless otherwise stated and without specifically mentioning them in your answers.",
							"ActionUID": 15546266
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionName": "Prepare variable with user prompt or simply stop if there's no message",
							"ActionUID": 15546267,
							"ElseActions": [
								{
									"MacroActionType": "IfThenElse",
									"ActionName": "IF - Condition to only switch to paused if not already there if on empty list mode then it will simply disable it",
									"ActionUID": 15546709,
									"IsDisclosed": false,
									"ElseActions": [],
									"TimeOutAbortsMacro": true,
									"Conditions": {
										"ConditionListMatch": "All",
										"ConditionList": [
											{
												"ConditionType": "Variable",
												"VariableValue": "",
												"Variable": "localPaused",
												"VariableConditionType": "Is"
											}
										]
									},
									"ElseActionListDisclosed": false,
									"ThenActions": [
										{
											"MacroActionType": "WriteFile",
											"Append": false,
											"Format2": "PlainText",
											"Format": "PlainText",
											"IsDisclosed": false,
											"Destination": "~/%localAIMemosFolder%/paused.txt",
											"Encoding": "UTF8",
											"ActionUID": 15546710,
											"Source": "Text",
											"Text": "%localAIMem%"
										},
										{
											"MacroActionType": "SetVariableToText",
											"IsDisclosed": false,
											"Variable": "localPaused",
											"Text": "%localAIMem%",
											"ActionUID": 15546711
										},
										{
											"MacroActionType": "WriteFile",
											"Append": false,
											"Format2": "PlainText",
											"Format": "PlainText",
											"IsDisclosed": false,
											"Destination": "~/%localAIMemosFolder%/list.txt",
											"Encoding": "UTF8",
											"ActionUID": 15546712,
											"Source": "Text",
											"Text": ""
										},
										{
											"MacroActionType": "SetVariableToText",
											"IsDisclosed": false,
											"Variable": "localAIMem",
											"Text": "",
											"ActionUID": 15546713
										},
										{
											"MacroActionType": "WriteFile",
											"Append": false,
											"Format2": "PlainText",
											"Format": "PlainText",
											"IsDisclosed": false,
											"Destination": "~/%localAIMemosFolder%/mode.txt",
											"Encoding": "UTF8",
											"ActionUID": 15546714,
											"Source": "Text",
											"Text": ""
										},
										{
											"MacroActionType": "SetVariableToText",
											"IsDisclosed": false,
											"Variable": "localMode",
											"Text": "",
											"ActionUID": 15546715
										}
									]
								},
								{
									"MacroActionType": "SetVariableToText",
									"IsDisclosed": false,
									"Variable": "localSpecialCase",
									"Text": "Yes",
									"ActionUID": 15547121
								}
							],
							"TimeOutAbortsMacro": true,
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "",
										"Variable": "localTranscription",
										"VariableConditionType": "Is"
									}
								]
							},
							"ThenActions": [
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Move file to processed folder",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"Source": "Nothing",
									"IncludeStdErr": false,
									"ActionUID": 15546299,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Window",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\ntheFile=\"$KMVAR_localFile\"\nprocessedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n\n# Get the base filename and extension\nfilename=$(basename -- \"$theFile\")\nextension=\"${filename##*.}\"\nfilename=\"${filename%.*}\"\n\n# Initialize counter\ncounter=1\n\n# Destination path\ndestPath=\"$processedDir/$filename.$extension\"\n\n# Check if file already exists and increment counter if needed\nwhile [[ -e \"$destPath\" ]]; do\n    destPath=\"$processedDir/$filename-$counter.$extension\"\n    ((counter++))\ndone\n\n# Move the file\nmv \"$theFile\" \"$destPath\""
								},
								{
									"MacroActionType": "ExecuteShellScript",
									"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for 10 seconds.",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"StopOnFailure": false,
									"Source": "Nothing",
									"Variable": "localFile",
									"IncludeStdErr": false,
									"ActionUID": 15546724,
									"UseText": true,
									"TrimResultsNew": true,
									"ActionColor": "Magenta",
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "Variable",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
								},
								{
									"MacroActionType": "IfThenElse",
									"ActionName": "If files found, process next one. If not found, trash empty directories.",
									"ActionUID": 15546270,
									"IsDisclosed": false,
									"ElseActions": [],
									"TimeOutAbortsMacro": true,
									"Conditions": {
										"ConditionListMatch": "All",
										"ConditionList": [
											{
												"ConditionType": "Variable",
												"VariableValue": "",
												"Variable": "localFile",
												"VariableConditionType": "IsNot"
											}
										]
									},
									"ThenActions": [
										{
											"MacroActionType": "ExecuteMacro",
											"UseParameter": false,
											"MacroUID": "53EC3205-7EE0-4515-84A0-BC1C2FB113AC",
											"TimeOutAbortsMacro": true,
											"Asynchronously": false,
											"ActionUID": 15546271
										}
									]
								},
								{
									"MacroActionType": "Cancel",
									"IsDisclosed": false,
									"Action": "CancelJustThisMacro",
									"ActionUID": 15546273
								}
							]
						}
					]
				}
			],
			"TimeOutAbortsMacro": true,
			"ActionColor": "Green"
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "Set Variable “localUserPrompt” to Text “%localTranscription%” - to later send back to Shortcut",
			"IsDisclosed": false,
			"Variable": "localUserPrompt",
			"Text": "%localTranscription%",
			"ActionUID": 15547120
		},
		{
			"MacroActionType": "ExecuteJavaScriptForAutomation",
			"ActionName": "Escape System Prompt",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"StopOnFailure": false,
			"Variable": "localSystemPrompt",
			"IncludeStdErr": false,
			"UseModernSyntax": false,
			"ActionUID": 15543289,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "(function(inDesignMode, designModeParams) {\n\t'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n\tfunction getKMVariable(name, required) {\n\t\tvar result = undefined;\n\t\tif (inDesignMode && designModeParams)\n\t\t\tresult = designModeParams[name];\n\t\tif (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        if (required && !result)\n\t\t\tthrow new Error(\"Variable '\" + name + \"' is empty\");\n\t\treturn result;\n\t}\n\t// #endregion\n\nfunction execute() {\n    var str = getKMVariable(\"localSystemPrompt\", true);\n    str = str.replace(/[\\u201C\\u201D]/g, '\"');\n    return JSON.stringify(str).slice(1, -1);\n}\n\n\ttry {\n\t\treturn execute();\n\t} catch (e) {\n\t\treturn \"Error on line: \" + e.line + \": \" + e.message;\n\t}\n\n})(false);",
			"NotifyOnFailure": false
		},
		{
			"MacroActionType": "ExecuteJavaScriptForAutomation",
			"ActionName": "Escape Transcription (same script as text replacements, but those were already done by now)",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"StopOnFailure": false,
			"Variable": "localTranscription",
			"IncludeStdErr": false,
			"UseModernSyntax": false,
			"ActionUID": 15543290,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "(function(inDesignMode, designModeParams) {\n    'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n    function getKMVariable(name, required) {\n        var result = undefined;\n        if (inDesignMode && designModeParams)\n            result = designModeParams[name];\n        if (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        if (required && !result)\n            throw new Error(\"Variable '\" + name + \"' is empty\");\n        return result;\n    }\n\n    function replaceWords(theDictionary, theText) {\n        // Parse the JSON string into an object\n        const dictionary = JSON.parse(theDictionary);\n\n        // Sort keys by length in descending order to replace longer phrases first\n        const sortedKeys = Object.keys(dictionary).sort((a, b) => b.length - a.length);\n\n        // Replace words in the text\n        let result = theText;\n        for (const key of sortedKeys) {\n            const regex = new RegExp(`\\\\b${key}\\\\b`, 'g');\n            result = result.replace(regex, match => {\n                const replacement = dictionary[key];\n                // Preserve the case of the original word\n                if (match === match.toUpperCase()) return replacement.toUpperCase();\n                if (match[0] === match[0].toUpperCase()) return replacement.charAt(0).toUpperCase() + replacement.slice(1).toLowerCase();\n                return replacement.toLowerCase();\n            });\n        }\n\n        return result;\n    }\n\n    function escapeString(str) {\n        str = str.replace(/[\\u201C\\u201D]/g, '\"');\n        return JSON.stringify(str).slice(1, -1);\n    }\n\n    function execute() {\n        const theDictionary = getKMVariable(\"localReplacements\", true);\n        const localTranscription = getKMVariable(\"localTranscription\", true);\n\n        // Perform word replacements\n        // const replacedText = replaceWords(theDictionary, localTranscription);\n\n        // Escape the resulting string\n        return escapeString(localTranscription);\n    }\n\n    try {\n        return execute();\n    } catch (e) {\n        return \"Error on line: \" + e.line + \": \" + e.message;\n    }\n\n})(false);",
			"NotifyOnFailure": false
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "LLM REQUEST",
			"ActionUID": 15547114,
			"IsDisclosed": false,
			"ElseActions": [
				{
					"MacroActionType": "ExecuteShellScript",
					"ActionName": "LLM Request - OPENAI",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"Source": "Nothing",
					"Variable": "localResult",
					"IncludeStdErr": false,
					"ActionUID": 15543292,
					"UseText": true,
					"TrimResultsNew": true,
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "Variable",
					"HonourFailureSettings": true,
					"Text": "curl \"https://api.openai.com/v1/chat/completions\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $KMVAR_localToken\" \\\n  -d \"{\n     \\\"messages\\\": [{\\\"role\\\": \\\"system\\\", \\\"content\\\": \\\"$KMVAR_localSystemPrompt\\\"},{\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"$KMVAR_localTranscription\\\"}],\n     \\\"temperature\\\": 0.5, \\\"model\\\": \\\"$KMVAR_localModel\\\"\n   }\""
				},
				{
					"MacroActionType": "SetVariableToText",
					"Variable": "localResult",
					"Text": "%JSONValue%localResult.choices.1.message.content%",
					"ActionUID": 15547118
				}
			],
			"ActionColor": "Red",
			"ThenActionListDisclosed": false,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "claude",
						"Variable": "localModel",
						"VariableConditionType": "StartsWith"
					}
				]
			},
			"TimeOutAbortsMacro": true,
			"ThenActions": [
				{
					"MacroActionType": "ExecuteShellScript",
					"ActionName": "LLM Request - CLAUDE",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"Source": "Nothing",
					"Variable": "localResult",
					"IncludeStdErr": false,
					"ActionUID": 15547115,
					"UseText": true,
					"TrimResultsNew": true,
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "Variable",
					"HonourFailureSettings": true,
					"Text": "curl \"https://api.anthropic.com/v1/messages\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-api-key: $KMVAR_localAntToken\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d \"{\n     \\\"messages\\\": [{\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"$KMVAR_localTranscription\\\"}],\n     \\\"temperature\\\": 0.5, \\\"model\\\": \\\"$KMVAR_localModel\\\", \\\"system\\\": \\\"$KMVAR_localSystemPrompt\\\", \\\"max_tokens\\\": 4000\n   }\""
				},
				{
					"MacroActionType": "SetVariableToText",
					"Variable": "localResult",
					"Text": "%JSONValue%localResult.content.1.text%",
					"ActionUID": 15547117
				}
			]
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "If mode is list, add to it. If not and a list exists, add to it, save, then clear. If no list exists, just save & clear.",
			"ActionUID": 15543711,
			"IsDisclosed": false,
			"ElseActions": [
				{
					"MacroActionType": "IfThenElse",
					"ElseActions": [
						{
							"MacroActionType": "SetVariableToText",
							"IsDisclosed": false,
							"Variable": "localAIMem",
							"Text": "%localAIMem%\n\n* %localResult%",
							"ActionUID": 15543730
						}
					],
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "",
								"Variable": "localAIMem",
								"VariableConditionType": "Is"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "SetVariableToText",
							"Variable": "localAIMem",
							"Text": "%localResult%",
							"ActionUID": 15543729
						}
					],
					"TimeOutAbortsMacro": true,
					"ActionUID": 15543728
				},
				{
					"MacroActionType": "ExecuteJavaScriptForAutomation",
					"ActionName": "Escape Memo",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"StopOnFailure": false,
					"Variable": "localAIMem",
					"IncludeStdErr": false,
					"UseModernSyntax": false,
					"ActionUID": 15545466,
					"UseText": true,
					"TrimResultsNew": true,
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "Variable",
					"IsDisclosed": false,
					"HonourFailureSettings": true,
					"Text": "(function(inDesignMode, designModeParams) {\n\t'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n\tfunction getKMVariable(name, required) {\n\t\tvar result = undefined;\n\t\tif (inDesignMode && designModeParams)\n\t\t\tresult = designModeParams[name];\n\t\tif (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        if (required && !result)\n\t\t\tthrow new Error(\"Variable '\" + name + \"' is empty\");\n\t\treturn result;\n\t}\n\t// #endregion\n\nfunction execute() {\n    var str = getKMVariable(\"localAIMem\", true);\n    str = str.replace(/[\\u201C\\u201D]/g, '\"');\n    return JSON.stringify(str).slice(1, -1);\n}\n\n\ttry {\n\t\treturn execute();\n\t} catch (e) {\n\t\treturn \"Error on line: \" + e.line + \": \" + e.message;\n\t}\n\n})(false);",
					"NotifyOnFailure": false
				},
				{
					"MacroActionType": "ExecuteJavaScriptForAutomation",
					"ActionName": "Escape Raw",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"StopOnFailure": false,
					"Variable": "localUserPrompt",
					"IncludeStdErr": false,
					"UseModernSyntax": false,
					"ActionUID": 15547123,
					"UseText": true,
					"TrimResultsNew": true,
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "Variable",
					"IsDisclosed": false,
					"HonourFailureSettings": true,
					"Text": "(function(inDesignMode, designModeParams) {\n    'use strict';\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\n    function getKMVariable(name) {\n        var result;\n        if (inDesignMode && designModeParams)\n            result = designModeParams[name];\n        if (result === undefined) {\n            if (name.match(/^Instance|^local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        return result || '';\n    }\n\n    function execute() {\n        var str = getKMVariable(\"localUserPrompt\");\n        if (!str) return '';\n        str = str.replace(/[\\u201C\\u201D]/g, '\"');\n        return JSON.stringify(str).slice(1, -1);\n    }\n\n    try {\n        return execute();\n    } catch (e) {\n        return '';\n    }\n\n})(false);",
					"NotifyOnFailure": false
				},
				{
					"MacroActionType": "ExecuteShortcut",
					"Source": "Text",
					"ExecuteOrEdit": "Execute",
					"ActionUID": 15543736,
					"TimeOutAbortsMacro": true,
					"TrimResults": true,
					"Shortcut": "AI Memos",
					"IncludeStdErr": false,
					"DisplayKind": "None",
					"SourceText": "{\"cmd\": \"process\",\"details\": \"%localNewName%\",\"memo\": \"%localAIMem%\",\"rawMemo\": \"%localUserPrompt%\",\"specialCase\": \"%localSpecialCase%\"}"
				},
				{
					"MacroActionType": "WriteFile",
					"ActionName": "Create new empty list file",
					"Append": false,
					"Format": "PlainText",
					"Format2": "PlainText",
					"Destination": "~/%localAIMemosFolder%/list.txt",
					"ActionUID": 15543750,
					"Encoding": "UTF8",
					"IsDisclosed": false,
					"Source": "Text",
					"Text": ""
				}
			],
			"ThenActionListDisclosed": false,
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "",
						"Variable": "localMode",
						"VariableConditionType": "IsNotEmpty"
					}
				]
			},
			"ThenActions": [
				{
					"MacroActionType": "IfThenElse",
					"ElseActions": [
						{
							"MacroActionType": "SetVariableToText",
							"Variable": "localAIMem",
							"Text": "%localAIMem%\n\n* %localResult%",
							"ActionUID": 15543716
						}
					],
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "",
								"Variable": "localAIMem",
								"VariableConditionType": "Is"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "SetVariableToText",
							"Variable": "localAIMem",
							"Text": "* %localResult%",
							"ActionUID": 15543715
						}
					],
					"TimeOutAbortsMacro": true,
					"ActionUID": 15543714
				},
				{
					"MacroActionType": "WriteFile",
					"Append": false,
					"Format2": "PlainText",
					"Format": "PlainText",
					"Destination": "~/%localAIMemosFolder%/list.txt",
					"Encoding": "UTF8",
					"ActionUID": 15543744,
					"Source": "Variable",
					"Variable": "localAIMem"
				}
			]
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "Move file to processed folder",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"Source": "Nothing",
			"IncludeStdErr": false,
			"ActionUID": 15546293,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Window",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "#!/bin/bash\n\ntheFile=\"$KMVAR_localFile\"\nprocessedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n\n# Get the base filename and extension\nfilename=$(basename -- \"$theFile\")\nextension=\"${filename##*.}\"\nfilename=\"${filename%.*}\"\n\n# Initialize counter\ncounter=1\n\n# Destination path\ndestPath=\"$processedDir/$filename.$extension\"\n\n# Check if file already exists and increment counter if needed\nwhile [[ -e \"$destPath\" ]]; do\n    destPath=\"$processedDir/$filename-$counter.$extension\"\n    ((counter++))\ndone\n\n# Move the file\nmv \"$theFile\" \"$destPath\""
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "History Maintenance - Keep on limit and move back unprocessed files (inside folder by error, slow wifi speed)",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"Source": "Nothing",
			"IncludeStdErr": false,
			"ActionUID": 15547547,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "None",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "#!/bin/bash\n\nprocessed_dir=\"$HOME/$KMVAR_localProcessedFolder\"\nprocessed_limit=\"$KMVAR_localHistoryLimit\"\norigin_folder=\"$HOME/$KMVAR_localParentFolder\"\n\n# Function to move a file or folder to trash using osascript\nmove_to_trash() {\n    osascript -e \"tell application \\\"Finder\\\" to delete POSIX file \\\"$1\\\"\"\n}\n\n# Function to move folder with audio files to origin_folder\nmove_audio_folder() {\n    local folder=\"$1\"\n    local base_name=$(basename \"$folder\")\n    local target=\"$origin_folder/$base_name\"\n    local counter=1\n\n    while [ -d \"$target\" ]; do\n        target=\"${origin_folder}/${base_name}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$folder\" \"$target\"\n}\n\n# First, move subfolders containing audio files to origin_folder\nfind \"$processed_dir\" -mindepth 1 -type d -print0 | while IFS= read -r -d '' folder; do\n    if [ \"$(find \"$folder\" -maxdepth 1 -type f \\( -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.aif\" -o -name \"*.mp3\" \\) | wc -l)\" -gt 0 ]; then\n        move_audio_folder \"$folder\"\n    fi\ndone\n\n# If processed_limit is 0, trash all files and empty folders in the directory\nif [ \"$processed_limit\" -eq 0 ]; then\n    find \"$processed_dir\" -type f -print0 | while IFS= read -r -d '' file; do\n        move_to_trash \"$file\"\n    done\n    find \"$processed_dir\" -type d -empty -print0 | while IFS= read -r -d '' folder; do\n        move_to_trash \"$folder\"\n    done\nelse\n    # Add 1 to processed_limit when it's not 0\n    adjusted_limit=$((processed_limit + 1))\n\n    # Process files\n    file_count=$(find \"$processed_dir\" -maxdepth 1 -type f | wc -l)\n    if [ \"$file_count\" -gt \"$adjusted_limit\" ]; then\n        excess=$((file_count - adjusted_limit))\n        find \"$processed_dir\" -maxdepth 1 -type f -print0 | \\\n        xargs -0 ls -t | \\\n        tail -n \"$excess\" | \\\n        while read -r file; do\n            move_to_trash \"$file\"\n        done\n    fi\n\n    # Process folders\n    folder_count=$(find \"$processed_dir\" -mindepth 1 -maxdepth 1 -type d | wc -l)\n    if [ \"$folder_count\" -gt \"$processed_limit\" ]; then\n        excess=$((folder_count - processed_limit))\n        find \"$processed_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | \\\n        xargs -0 ls -dt | \\\n        tail -n \"$excess\" | \\\n        while read -r folder; do\n            move_to_trash \"$folder\"\n        done\n    fi\nfi"
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for X seconds.",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"StopOnFailure": false,
			"Source": "Nothing",
			"Variable": "localFile",
			"IncludeStdErr": false,
			"ActionUID": 15546718,
			"UseText": true,
			"TrimResultsNew": true,
			"ActionColor": "Magenta",
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "If files found, process next one. If not found, trash empty directories.",
			"ActionUID": 15543301,
			"IsDisclosed": false,
			"ElseActions": [],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "",
						"Variable": "localFile",
						"VariableConditionType": "IsNot"
					}
				]
			},
			"ThenActions": [
				{
					"MacroActionType": "ExecuteMacro",
					"UseParameter": false,
					"MacroUID": "53EC3205-7EE0-4515-84A0-BC1C2FB113AC",
					"TimeOutAbortsMacro": true,
					"Asynchronously": false,
					"ActionUID": 15543302
				}
			]
		},
		{
			"MacroActionType": "Semaphore",
			"IsDisclosed": false,
			"SemaphoreAction": "Unlock",
			"SemaphoreName": "AIMemos",
			"ActionUID": 15542495
		}
	],
	"Name": "AI Memos",
	"CustomIconData": "KMEC=Rounded=KMCOLOR:253,128,8,0=✨=88=-4=2=1=KMCOLOR:255,255,255,255"
}