{
	"UID": "FD77FD9C-DB62-452D-9C4E-5709927CC6E1",
	"CreationDate": 760624943.403409,
	"ModificationDate": 761299439.091401,
	"Triggers": [
		{
			"MacroTriggerType": "Folder",
			"Interest": {
				"ObserveWhen": "IgnorePartial",
				"UID2": "5003179F-08D8-4AAC-820F-FC968B14829A",
				"Observe": "Add",
				"Path": "~/Library/Mobile Documents/iCloud~com~openplanetsoftware~just-press-record/Documents"
			}
		}
	],
	"IsActive": false,
	"Actions": [
		{
			"MacroActionType": "Semaphore",
			"ActionName": "Semaphore Lock - Allows only one instance of macro to run at a time.",
			"ActionUID": 15576560,
			"IsDisclosed": false,
			"TimeOutAbortsMacro": true,
			"SemaphoreName": "InboxMemos",
			"SemaphoreAction": "Lock"
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "“localWaitTime\" in sec. Gives chance to files to sync down before processing. Raise for slow internet. (default at 30)",
			"ActionUID": 15576155,
			"IsDisclosed": false,
			"Variable": "localWaitTime",
			"Text": "30",
			"ActionColor": "Purple"
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "“localParentFolder” -> JustPressRecord Folder",
			"ActionUID": 15576156,
			"IsDisclosed": false,
			"Variable": "localParentFolder",
			"Text": "Library/Mobile Documents/iCloud~com~openplanetsoftware~just-press-record/Documents",
			"ActionColor": "Yellow"
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "“localProcessedFolder” -> The INBOX AI Watched folder",
			"ActionUID": 15576158,
			"IsDisclosed": false,
			"Variable": "localProcessedFolder",
			"Text": "Documents/InboxAI",
			"ActionColor": "Red"
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for X seconds.",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"StopOnFailure": false,
			"Source": "Nothing",
			"Variable": "localFile",
			"IncludeStdErr": false,
			"ActionUID": 15576154,
			"UseText": true,
			"TrimResultsNew": true,
			"ActionColor": "Magenta",
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "Cancel Macro if no files found. Otherwise, rename file and gather details.",
			"ActionUID": 15576159,
			"IsDisclosed": false,
			"ElseActions": [
				{
					"MacroActionType": "GetFileAttribute",
					"Attribute": "Parent",
					"Path": "%localFile%",
					"Variable": "localFileParent",
					"ActionUID": 15576161
				},
				{
					"MacroActionType": "GetFileAttribute",
					"Attribute": "Extension",
					"Path": "%localFile%",
					"Variable": "localFileExtension",
					"ActionUID": 15576162
				},
				{
					"MacroActionType": "ExecuteShellScript",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"Source": "Nothing",
					"Variable": "localNewName",
					"IncludeStdErr": false,
					"ActionUID": 15576163,
					"UseText": true,
					"TrimResultsNew": true,
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "AppendVar",
					"HonourFailureSettings": true,
					"Text": "#!/bin/bash\n\n# File path stored in a variable\nfile_path=\"$KMVAR_localFile\"\n\n# Get file creation (birth time) using stat\ncreation_time=$(stat -f \"%SB\" -t \"%y%m%d_%H%M%S\" \"$file_path\")\n\n# Echo the creation time in the requested format\necho \"$creation_time\""
				},
				{
					"MacroActionType": "File",
					"NotifyOnFailure": false,
					"Source": "%localFile%",
					"Operation": "OnlyRename",
					"Destination": "%localNewName%.%localFileExtension%",
					"ActionUID": 15576164
				},
				{
					"MacroActionType": "SetVariableToText",
					"Variable": "localFile",
					"Text": "%localFileParent%/%localNewName%.%localFileExtension%",
					"ActionUID": 15576165
				}
			],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "",
						"Variable": "localFile",
						"VariableConditionType": "Is"
					}
				]
			},
			"ThenActions": [
				{
					"MacroActionType": "Cancel",
					"ActionUID": 15576160,
					"Action": "CancelThisMacro"
				}
			]
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "Move file to Inbox AI Folder for it to be processed",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"Source": "Nothing",
			"IncludeStdErr": false,
			"ActionUID": 15576166,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Window",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "#!/bin/bash\n\ntheFile=\"$KMVAR_localFile\"\nprocessedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n\n# Get the base filename and extension\nfilename=$(basename -- \"$theFile\")\nextension=\"${filename##*.}\"\nfilename=\"${filename%.*}\"\n\n# Initialize counter\ncounter=1\n\n# Destination path\ndestPath=\"$processedDir/$filename.$extension\"\n\n# Check if file already exists and increment counter if needed\nwhile [[ -e \"$destPath\" ]]; do\n    destPath=\"$processedDir/$filename-$counter.$extension\"\n    ((counter++))\ndone\n\n# Move the file\nmv \"$theFile\" \"$destPath\""
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "Search for m4a files, waits for them to be fully downloaded, or removes empty directories without activity for X seconds.",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"StopOnFailure": false,
			"Source": "Nothing",
			"Variable": "localFile",
			"IncludeStdErr": false,
			"ActionUID": 15576557,
			"UseText": true,
			"TrimResultsNew": true,
			"ActionColor": "Magenta",
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "#!/bin/bash\n\nbase_dir=\"$HOME/$KMVAR_localParentFolder\"\noldest_file=\"\"\nmax_wait_time=\"$KMVAR_localWaitTime\"  # Maximum time to wait for file download in seconds\ncheck_interval=2  # Time between checks in seconds\n\n# Function to check if a directory contains audio files\nhas_audio_files() {\n    find \"$1\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) | grep -q .\n}\n\n# Function to check if a file is fully downloaded\nis_file_fully_downloaded() {\n    local file=\"$1\"\n    local size1=$(stat -f %z \"$file\")\n    sleep 2\n    local size2=$(stat -f %z \"$file\")\n    [ \"$size1\" = \"$size2\" ]\n}\n\n# Process subdirectories\nfind \"$base_dir\" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir; do\n    wait_time=0\n    files_detected=false\n    all_files_downloaded=false\n\n    while [ $wait_time -lt $max_wait_time ] || ($files_detected && ! $all_files_downloaded); do\n        if has_audio_files \"$dir\"; then\n            files_detected=true\n            # Check if all audio files are fully downloaded\n            all_files_downloaded=true\n            while IFS= read -r -d '' file; do\n                if ! is_file_fully_downloaded \"$file\"; then\n                    all_files_downloaded=false\n                    break\n                fi\n            done < <(find \"$dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0)\n            \n            if $all_files_downloaded; then\n                break\n            fi\n        fi\n\n        sleep $check_interval\n        wait_time=$((wait_time + check_interval))\n    done\n    \nif ! $files_detected; then\n    # No audio files found after waiting, move the directory to processed folder\n    processedDir=\"$HOME/$KMVAR_localProcessedFolder\"\n    baseName=$(basename \"$dir\")\n    targetDir=\"$processedDir/$baseName\"\n    counter=1\n\n    while [ -d \"$targetDir\" ]; do\n        targetDir=\"${processedDir}/${baseName}_${counter}\"\n        ((counter++))\n    done\n\n    mv \"$dir\" \"$targetDir\"\nfi\n\ndone\n\n# Find the oldest audio file\noldest_file=$(find \"$base_dir\" -type f \\( -name \"*.aif\" -o -name \"*.wav\" -o -name \"*.m4a\" -o -name \"*.mp3\" \\) -print0 | xargs -0 ls -t | tail -n 1)\n\n# Echo the oldest file if found, otherwise echo an empty string\necho \"${oldest_file:-}\""
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "If files found, process next one. If not found, trash empty directories.",
			"ActionUID": 15576558,
			"IsDisclosed": false,
			"ElseActions": [],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "",
						"Variable": "localFile",
						"VariableConditionType": "IsNot"
					}
				]
			},
			"ThenActions": [
				{
					"MacroActionType": "ExecuteMacro",
					"UseParameter": false,
					"MacroUID": "FD77FD9C-DB62-452D-9C4E-5709927CC6E1",
					"TimeOutAbortsMacro": true,
					"Asynchronously": false,
					"ActionUID": 15576559
				}
			]
		},
		{
			"MacroActionType": "Semaphore",
			"IsDisclosed": false,
			"SemaphoreAction": "Unlock",
			"SemaphoreName": "InboxMemos",
			"ActionUID": 15576561
		}
	],
	"Name": "AI Memos (Inbox AI)",
	"CustomIconData": "KMEP-StarRating"
}