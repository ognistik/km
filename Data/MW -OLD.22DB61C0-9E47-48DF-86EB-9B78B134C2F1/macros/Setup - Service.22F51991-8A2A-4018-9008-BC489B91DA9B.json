{
	"UID": "22F51991-8A2A-4018-9008-BC489B91DA9B",
	"CreationDate": 766286765.598647,
	"ModificationDate": 770854312.58661,
	"Triggers": [
		{
			"AutoRun": false,
			"Display": "The Service",
			"MacroTriggerType": "GroupStatusMenu"
		}
	],
	"IsActive": false,
	"Actions": [
		{
			"MacroActionType": "Comment",
			"Title": "About",
			"IsDisclosed": false,
			"StyledText": "\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\tcnRmZAAAAAADAAAAAgAA\n\t\t\t\t\t\t\tAAcAAABUWFQucnRmAQAA\n\t\t\t\t\t\t\tAC4+AgAAKwAAAAEAAAA2\n\t\t\t\t\t\t\tAgAAe1xydGYxXGFuc2lc\n\t\t\t\t\t\t\tYW5zaWNwZzEyNTJcY29j\n\t\t\t\t\t\t\tb2FydGYyODIyClxjb2Nv\n\t\t\t\t\t\t\tYXRleHRzY2FsaW5nMFxj\n\t\t\t\t\t\t\tb2NvYXBsYXRmb3JtMHtc\n\t\t\t\t\t\t\tZm9udHRibFxmMFxmc3dp\n\t\t\t\t\t\t\tc3NcZmNoYXJzZXQwIEhl\n\t\t\t\t\t\t\tbHZldGljYTt9CntcY29s\n\t\t\t\t\t\t\tb3J0Ymw7XHJlZDI1NVxn\n\t\t\t\t\t\t\tcmVlbjI1NVxibHVlMjU1\n\t\t\t\t\t\t\tO1xyZWQwXGdyZWVuMFxi\n\t\t\t\t\t\t\tbHVlMDt9CntcKlxleHBh\n\t\t\t\t\t\t\tbmRlZGNvbG9ydGJsOztc\n\t\t\t\t\t\t\tY3NzcmdiXGMwXGMwXGMw\n\t\t\t\t\t\t\tXGM4NDcwNlxjbmFtZSBj\n\t\t\t\t\t\t\tb250cm9sVGV4dENvbG9y\n\t\t\t\t\t\t\tO30KXHBhcmRcdHg1NjBc\n\t\t\t\t\t\t\tdHgxMTIwXHR4MTY4MFx0\n\t\t\t\t\t\t\teDIyNDBcdHgyODAwXHR4\n\t\t\t\t\t\t\tMzM2MFx0eDM5MjBcdHg0\n\t\t\t\t\t\t\tNDgwXHR4NTA0MFx0eDU2\n\t\t\t\t\t\t\tMDBcdHg2MTYwXHR4Njcy\n\t\t\t\t\t\t\tMFxwYXJkaXJuYXR1cmFs\n\t\t\t\t\t\t\tXHBhcnRpZ2h0ZW5mYWN0\n\t\t\t\t\t\t\tb3IwCgpcZjBcZnMyNiBc\n\t\t\t\t\t\t\tY2YyIFBsZWFzZSBtYWtl\n\t\t\t\t\t\t\tIHN1cmUgdGhhdCB5b3Ug\n\t\t\t\t\t\t\taGF2ZSBpbnN0YWxsZWQg\n\t\t\t\t\t\t\tRlNXYXRjaCBgYnJldyBp\n\t\t\t\t\t\t\tbnN0YWxsIGZzd2F0Y2hg\n\t\t\t\t\t\t\tIGJlZm9yZSBydW5uaW5n\n\t\t\t\t\t\t\tIHRoaXMgbWFjcm8uIEFs\n\t\t\t\t\t\t\tc28gbWFrZSBzdXJlIHRo\n\t\t\t\t\t\t\tYXQgeW91IGhhdmUgc2V0\n\t\t\t\t\t\t\tIHRoZSBjb3JyZWN0IHBh\n\t\t\t\t\t\t\tdGhzIGluIHRoZSBvcmFu\n\t\t\t\t\t\t\tZ2UgY29sb3ItY29kZWQg\n\t\t\t\t\t\t\tZmllbGRzIGJlbG93Ln0B\n\t\t\t\t\t\t\tAAAAIwAAAAEAAAAHAAAA\n\t\t\t\t\t\t\tVFhULnJ0ZhAAAAAoYf1n\n\t\t\t\t\t\t\ttgEAAAAAAAAAAAAA\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\t",
			"ActionUID": 15612079
		},
		{
			"MacroActionType": "SetVariableToText",
			"IsDisclosed": false,
			"Variable": "localInput",
			"Text": "%TriggerValue%",
			"ActionUID": 15620853
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "Macro Group Version Check",
			"ActionUID": 15620854,
			"IsDisclosed": false,
			"ElseActions": [
				{
					"MacroActionType": "IfThenElse",
					"ElseActions": [],
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "updateMacros",
								"Variable": "localInput",
								"VariableConditionType": "Is"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "OpenURL",
							"TimeOutAbortsMacro": true,
							"URL": "https://github.com/ognistik/macrowhisper/releases/latest/",
							"IsDefaultApplication": true,
							"ActionUID": 15620858
						},
						{
							"MacroActionType": "Cancel",
							"ActionUID": 15620857,
							"Action": "CancelThisMacro"
						}
					],
					"TimeOutAbortsMacro": true,
					"ActionUID": 15620856
				}
			],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "versionCheck",
						"Variable": "localInput",
						"VariableConditionType": "Is"
					}
				]
			},
			"ThenActions": [
				{
					"MacroActionType": "Return",
					"ActionUID": 15620855,
					"Text": "1.0.3"
				}
			]
		},
		{
			"MacroActionType": "Cancel",
			"IsDisclosed": false,
			"Action": "CancelThisMacro",
			"ActionUID": 15620859
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "Path to Superwhisper folder - under user's home directory",
			"ActionUID": 15611258,
			"IsDisclosed": false,
			"Variable": "localDir",
			"Text": "/Documents/superwhisper",
			"ActionColor": "Orange"
		},
		{
			"MacroActionType": "SetVariableToText",
			"ActionName": "Path to FSWatch",
			"ActionUID": 15611259,
			"IsDisclosed": false,
			"Variable": "localFS",
			"Text": "/opt/homebrew/bin/fswatch",
			"ActionColor": "Orange"
		},
		{
			"MacroActionType": "ExecuteShellScript",
			"ActionName": "First, we check if the script and launch agent are correctly setup or not",
			"IncludedVariables": [
				"9999"
			],
			"TrimResults": true,
			"Source": "Nothing",
			"Variable": "localCheck",
			"IncludeStdErr": false,
			"ActionUID": 15611257,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "#!/bin/bash\n\nFILE1=\"$HOME/macrowhisper/sw-watcher\"\nFILE2=\"$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist\"\n\nif [[ -f \"$FILE1\" && -f \"$FILE2\" ]]; then\n    echo \"0\"\nelif [[ -f \"$FILE1\" ]]; then\n    echo \"FSWatch script\"\nelif [[ -f \"$FILE2\" ]]; then\n    echo \"launch agent\"\nelse\n    echo \"1\"\nfi"
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "Then we present options to the user depending on the current setup",
			"ActionUID": 15611264,
			"IsDisclosed": false,
			"ElseActions": [
				{
					"MacroActionType": "ExecuteShellScript",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"Source": "Nothing",
					"Variable": "localAction",
					"IncludeStdErr": false,
					"ActionUID": 15611285,
					"UseText": true,
					"TrimResultsNew": true,
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "Variable",
					"IsDisclosed": false,
					"HonourFailureSettings": true,
					"Text": "#!/bin/bash\n\nLAUNCH_AGENT_PATH=\"$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist\"\n\n# Check if the Launch Agent is loaded\nif launchctl list | grep -q \"com.aft.sw-watcher\"; then\n    echo \"Stop\"\nelse\n    echo \"Start\"\nfi"
				},
				{
					"MacroActionType": "ExecuteMacro",
					"MacroUID": "9F09BD21-DBAC-43A9-8D9B-E244352B520F",
					"ActionUID": 15611268,
					"IsDisclosed": false,
					"TimeOutAbortsMacro": true,
					"UseParameter": false,
					"Asynchronously": true
				},
				{
					"MacroActionType": "PromptWithList",
					"Sort": false,
					"NotifyOnTimeOut": true,
					"Source": "Text",
					"DestinationVariable": "localAction",
					"WindowTitle": "SW Watcher Control",
					"ActionUID": 15611263,
					"PromptUID": "E0F79B9B-4C8B-4F46-94EF-0582FFDB479D",
					"TimeOutAbortsMacro": false,
					"IsDisclosed": false,
					"Destination": "Variable",
					"Text": "3__%localAction% the service\n2__Reveal log file\n1__Uninstall",
					"NotifyOnFailure": false
				},
				{
					"MacroActionType": "IfThenElse",
					"ActionUID": 15611286,
					"IsDisclosed": false,
					"TimeOutAbortsMacro": true,
					"ElseActions": [
						{
							"MacroActionType": "IfThenElse",
							"ElseActions": [
								{
									"MacroActionType": "ExecuteShellScript",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"Source": "Nothing",
									"IncludeStdErr": false,
									"ActionUID": 15611295,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "None",
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\nLAUNCH_AGENT_PATH=\"$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist\"\n\n# Check if the launch agent is currently loaded\nif launchctl list | grep -q \"com.aft.sw-watcher\"; then\n    # If loaded, unload it\n    launchctl unload \"$LAUNCH_AGENT_PATH\"\n    osascript -e 'display notification \"SW Watcher has been stopped\" with title \"SW Watcher\"'\nelse\n    # If not loaded, load it\n    launchctl load \"$LAUNCH_AGENT_PATH\"\n    osascript -e 'display notification \"SW Watcher is now running\" with title \"SW Watcher\"'\nfi"
								}
							],
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "2",
										"Variable": "localAction",
										"VariableConditionType": "Is"
									}
								]
							},
							"ThenActions": [
								{
									"MacroActionType": "ExecuteShellScript",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"Source": "Nothing",
									"IncludeStdErr": false,
									"ActionUID": 15611292,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "None",
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\nLOG_FILE=\"/tmp/sw-watcher.log\"\n\n# Check if the log file exists\nif [ -f \"$LOG_FILE\" ]; then\n    # File exists, reveal in Finder\n    open -R \"$LOG_FILE\"\nelse\n    # File does not exist, show AppleScript notification\n    osascript -e 'display notification \"The log file does not exist at /tmp/sw-watcher.log\" with title \"File Not Found\"'\nfi"
								}
							],
							"TimeOutAbortsMacro": true,
							"ActionUID": 15611291
						}
					],
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "1",
								"Variable": "localAction",
								"VariableConditionType": "Is"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "ExecuteShellScript",
							"IncludedVariables": [
								"9999"
							],
							"TrimResults": true,
							"Source": "Nothing",
							"IncludeStdErr": false,
							"ActionUID": 15611287,
							"UseText": true,
							"TrimResultsNew": true,
							"TimeOutAbortsMacro": true,
							"Path": "",
							"DisplayKind": "None",
							"HonourFailureSettings": true,
							"Text": "#!/bin/bash\n\n# Unload the launch agent\nlaunchctl unload ~/Library/LaunchAgents/com.aft.sw-watcher.plist 2>/dev/null\n\n# Conditionally delete files only if they exist\n[ -f \"$HOME/macrowhisper/sw-watcher\" ] && rm -f \"$HOME/macrowhisper/sw-watcher\"\n[ -f \"$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist\" ] && rm -f \"$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist\"\n\n# Conditionally delete the macrowhisper directory and its contents if it exists\n[ -d \"$HOME/macrowhisper\" ] && rm -rf \"$HOME/macrowhisper\"\n\necho \"Launch agent unloaded and files deleted successfully.\""
						},
						{
							"MacroActionType": "Notification",
							"Title": "SW Watcher",
							"SoundName": "",
							"Subtitle": "",
							"Text": "SW Watcher has been completely uninstalled.",
							"ActionUID": 15611289
						}
					]
				}
			],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "0",
						"Variable": "localCheck",
						"VariableConditionType": "IsNot"
					}
				]
			},
			"ThenActions": [
				{
					"MacroActionType": "IfThenElse",
					"ActionUID": 15611271,
					"IsDisclosed": false,
					"ThenActionListDisclosed": false,
					"ElseActions": [
						{
							"MacroActionType": "ExecuteMacro",
							"MacroUID": "9F09BD21-DBAC-43A9-8D9B-E244352B520F",
							"ActionUID": 15611277,
							"IsDisclosed": false,
							"TimeOutAbortsMacro": true,
							"UseParameter": false,
							"Asynchronously": true
						},
						{
							"MacroActionType": "PromptForUserInput",
							"Title": "SW Watcher",
							"Prompt": "Only the %localCheck% file exists at the correct location. Further action is necessary for SW Watcher to function properly. Please select how you'd like to proceed.",
							"ActionUID": 15611278,
							"IsDisclosed": false,
							"TimeOutAbortsMacro": true,
							"Buttons": [
								{
									"Button": "Continue",
									"Cancel": false
								},
								{
									"Button": "Cancel",
									"Cancel": true
								}
							],
							"Variables": [
								{
									"Default": "Select|Completely Uninstall|Setup Again",
									"Type": "Menu",
									"Variable": "localAction"
								}
							]
						},
						{
							"MacroActionType": "IfThenElse",
							"ActionUID": 15611279,
							"IsDisclosed": false,
							"TimeOutAbortsMacro": true,
							"ElseActions": [
								{
									"MacroActionType": "ExecuteShellScript",
									"IncludedVariables": [
										"9999"
									],
									"TrimResults": true,
									"Source": "Nothing",
									"IncludeStdErr": false,
									"ActionUID": 15611282,
									"UseText": true,
									"TrimResultsNew": true,
									"TimeOutAbortsMacro": true,
									"Path": "",
									"DisplayKind": "None",
									"IsDisclosed": false,
									"HonourFailureSettings": true,
									"Text": "#!/bin/bash\n\n# Unload the launch agent\nlaunchctl unload ~/Library/LaunchAgents/com.aft.sw-watcher.plist 2>/dev/null\n\n# Conditionally delete files only if they exist\n[ -f \"$HOME/macrowhisper/sw-watcher\" ] && rm -f \"$HOME/macrowhisper/sw-watcher\"\n[ -f \"$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist\" ] && rm -f \"$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist\"\n\n# Conditionally delete the macrowhisper directory and its contents if it exists\n[ -d \"$HOME/macrowhisper\" ] && rm -rf \"$HOME/macrowhisper\"\n\necho \"Launch agent unloaded and files deleted successfully.\""
								},
								{
									"MacroActionType": "IfThenElse",
									"ActionUID": 15611281,
									"IsDisclosed": false,
									"ElseActions": [],
									"TimeOutAbortsMacro": true,
									"Conditions": {
										"ConditionListMatch": "All",
										"ConditionList": [
											{
												"ConditionType": "Variable",
												"VariableValue": "Completely Uninstall",
												"Variable": "localAction",
												"VariableConditionType": "Is"
											}
										]
									},
									"ElseActionListDisclosed": false,
									"ThenActions": [
										{
											"MacroActionType": "Notification",
											"Title": "SW Watcher - Setup",
											"ActionUID": 15611284,
											"IsDisclosed": false,
											"Text": "SW Watcher has been completely uninstalled.",
											"Subtitle": "",
											"SoundName": ""
										},
										{
											"MacroActionType": "Cancel",
											"IsDisclosed": false,
											"Action": "CancelThisMacro",
											"ActionUID": 15611283
										}
									]
								}
							],
							"Conditions": {
								"ConditionListMatch": "All",
								"ConditionList": [
									{
										"ConditionType": "Variable",
										"VariableValue": "Select",
										"Variable": "localAction",
										"VariableConditionType": "Is"
									}
								]
							},
							"ThenActions": [
								{
									"MacroActionType": "Cancel",
									"ActionUID": 15611280,
									"Action": "CancelThisMacro"
								}
							]
						}
					],
					"TimeOutAbortsMacro": true,
					"Conditions": {
						"ConditionListMatch": "All",
						"ConditionList": [
							{
								"ConditionType": "Variable",
								"VariableValue": "1",
								"Variable": "localCheck",
								"VariableConditionType": "Is"
							}
						]
					},
					"ThenActions": [
						{
							"MacroActionType": "ExecuteMacro",
							"UseParameter": false,
							"MacroUID": "9F09BD21-DBAC-43A9-8D9B-E244352B520F",
							"TimeOutAbortsMacro": true,
							"Asynchronously": true,
							"ActionUID": 15611265
						},
						{
							"MacroActionType": "PromptForUserInput",
							"Title": "SW Watcher",
							"Prompt": "Press \"Continue\" to setup the necessary files for the SW Watcher launch agent service to work properly. Make sure the correct Superwhisper path and FSWatch path have been setup in the KM macro. Service will auto-load after installation.",
							"ActionUID": 15611272,
							"TimeOutAbortsMacro": true,
							"Buttons": [
								{
									"Button": "Continue",
									"Cancel": false
								},
								{
									"Button": "Cancel",
									"Cancel": true
								}
							],
							"Variables": []
						}
					]
				},
				{
					"MacroActionType": "ExecuteShellScript",
					"ActionName": "Create Launch Agent and Script & Runs LaunchAgent",
					"IncludedVariables": [
						"9999"
					],
					"TrimResults": true,
					"Source": "Nothing",
					"IncludeStdErr": false,
					"ActionUID": 15611269,
					"UseText": true,
					"TrimResultsNew": true,
					"TimeOutAbortsMacro": true,
					"Path": "",
					"DisplayKind": "None",
					"IsDisclosed": false,
					"HonourFailureSettings": true,
					"Text": "#!/bin/bash\n\n# Validate FSWatch path\nFSWATCH_DIR=\"$KMVAR_localFS\"\nif [ ! -x \"$FSWATCH_DIR\" ]; then\n    echo \"ERROR: FSWatch executable not found at $FSWATCH_DIR\"\n    osascript -e \"display notification \\\"FSWatch not found at specified path. Please check configuration.\\\" with title \\\"SW Watcher\\\"\"\n    exit 1\nfi\n\n# Validate Recordings Directory\nif [ ! -d \"$HOME$KMVAR_localDir/recordings\" ]; then\n    echo \"ERROR: Recordings directory not found at $HOME$KMVAR_localDir/recordings\"\n    osascript -e \"display notification \\\"Recordings directory not found. Please check configuration.\\\" with title \\\"SW Watcher\\\"\"\n    exit 1\nfi\n\n# Optional: Additional validation for local directory\nif [ ! -d \"$HOME$KMVAR_localDir\" ]; then\n    echo \"ERROR: Local directory not found at $HOME$KMVAR_localDir\"\n    osascript -e \"display notification \\\"Superwhisper directory not found. Please check configuration.\\\" with title \\\"SW Watcher\\\"\"\n    exit 1\nfi\n\n# Ensure LaunchAgents directory exists\nif [ ! -d \"$HOME/Library/LaunchAgents\" ]; then\n    mkdir -p \"$HOME/Library/LaunchAgents\"\nfi\n\n# Ensure macrowhisper directory exists\nif [ ! -d \"$HOME/macrowhisper\" ]; then\n    mkdir -p \"$HOME/macrowhisper\"\nfi\n\n# Create a plist file for the LaunchAgent\ncat > ~/Library/LaunchAgents/com.aft.sw-watcher.plist << EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>com.aft.sw-watcher</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>$HOME/macrowhisper/sw-watcher</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n    <key>ThrottleInterval</key>\n    <integer>60</integer>\n</dict>\n</plist>\nEOF\n\n# Create the watcher script\ncat > $HOME/macrowhisper/sw-watcher << EOF\n#!/bin/bash\n\nRECORDINGS_DIR=\"$HOME$KMVAR_localDir/recordings\"\nFSWATCH_DIR=\"$KMVAR_localFS\"\nLAST_PROCESSED=\"\"\nLOG_FILE=\"/tmp/sw-watcher.log\"\nMAX_LOG_SIZE_MB=5\n\n# Function to rotate log file if it gets too large\nrotate_log() {\n    local log_size_kb=\\$(du -k \"\\$LOG_FILE\" 2>/dev/null | cut -f1)\n    \n    if [ -n \"\\$log_size_kb\" ] && [ \"\\$log_size_kb\" -gt \\$((MAX_LOG_SIZE_MB * 1024)) ]; then\n        mv \"\\$LOG_FILE\" \"\\${LOG_FILE}.old\"\n        touch \"\\$LOG_FILE\"\n        echo \"\\$(date): Log file rotated due to size\" >> \"\\$LOG_FILE\"\n    fi\n}\n\ntouch \"\\$LOG_FILE\"\necho \"\\$(date): FSWatch monitoring service started\" >> \"\\$LOG_FILE\"\n\n# Function to check if fswatch is installed\ncheck_fswatch() {\n    if ! command -v \\$FSWATCH_DIR &> /dev/null; then\n        echo \"\\$(date): ERROR - fswatch not found. Please install it with 'brew install fswatch'\" >> \"\\$LOG_FILE\"\n        osascript -e \"display notification \\\"fswatch not found. Please install it with 'brew install fswatch'\\\" with title \\\"SW Watcher\\\"\"\n        exit 1\n    fi\n}\n\n# Function to check if the recordings directory exists\ncheck_recordings_dir() {\n    if [ ! -d \"\\$RECORDINGS_DIR\" ]; then\n        # Directory doesn't exist, notify user and exit\n        osascript -e \"display notification \\\"Recordings directory not found at \\$RECORDINGS_DIR. Monitoring stopped.\\\" with title \\\"SW Watcher\\\"\"\n        echo \"\\$(date): ERROR - Recordings directory not found at \\$RECORDINGS_DIR. Exiting.\" >> \"\\$LOG_FILE\"\n        exit 1\n    fi\n}\n\n# Check dependencies and directory before starting\ncheck_recordings_dir\ncheck_fswatch\nrotate_log\n\n# Set up error handling\ntrap '\n    error_line=\\$LINENO\n    echo \"\\$(date): ERROR - Script has quit on line \\$error_line\" >> \"\\$LOG_FILE\"\n    [ -n \"$heartbeat_pid\" ] && kill \"$heartbeat_pid\" 2>/dev/null\n    exit 1\n' ERR\n\n# Normal termination trap\ntrap '\n    echo \"\\$(date): INFO - Script received termination signal\" >> \"\\$LOG_FILE\"\n    [ -n \"$heartbeat_pid\" ] && kill \"$heartbeat_pid\" 2>/dev/null\n    exit 0\n' SIGINT SIGTERM EXIT\n\n# Function to process new meta.json files\nprocess_meta_json() {\n    local file=\"\\$1\"\n    local event_type=\"\\$2\"\n    local parent_dir=\\$(dirname \"\\$file\")\n    \n    # Record this as the most recently processed file\n    LAST_PROCESSED=\"\\$file\"\n    \n    echo \"\\$(date): \\$event_type event for meta.json in \\$parent_dir\" >> \"\\$LOG_FILE\"\n    \n    if [ \"\\$event_type\" = \"Created\" ] || [ \"\\$event_type\" = \"Updated\" ]; then\n        if [ -f \"\\$file\" ]; then\n            # Your processing logic here\n            echo \"\\$(date): Processing meta.json in \\$parent_dir\" >> \"\\$LOG_FILE\"\n            # Add your specific processing commands\n            osascript -e \"tell application \\\"Keyboard Maestro Engine\\\" to do script \\\"Trigger - Meta\\\"\" > /dev/null 2>&1 &\n        fi\n    fi\n}\n\n# Create a heartbeat function to check if monitoring is still running\n(\n    while true; do\n        sleep 3600  # Check every hour\n        if [ ! -d \"\\$RECORDINGS_DIR\" ]; then\n            echo \"\\$(date): WARNING - Recordings directory no longer exists during hourly check\" >> \"\\$LOG_FILE\"\n            osascript -e \"display notification \\\"Recordings directory no longer exists. Monitoring stopped.\\\" with title \\\"SW Watcher\\\"\"\n            # Exit the entire script\n            kill \\$\\$ # This kills the parent process\n            exit 1\n        else\n            echo \"\\$(date): INFO - Monitoring heartbeat, service is running\" >> \"\\$LOG_FILE\"\n        fi\n        rotate_log\n    done\n) &\nheartbeat_pid=\\$!\n\n# Main fswatch process\n{\n    \\$FSWATCH_DIR -0 -x --latency 0.1 -event Created -event AttributeModified -e \".*\" -i \"meta\\.json\\$\" \"\\$RECORDINGS_DIR\" | while IFS= read -r -d '' line; do\n        # Log the full line to understand what fswatch is reporting - Leaving here for debugging\n        # echo \"\\$(date): Full fswatch line: \\$line\" >> /tmp/meta-json-debug.log\n        \n        # Extract the file path and event flags\n        file=\\$(echo \"\\$line\" | awk '{print \\$1}')\n        event_flags=\\$(echo \"\\$line\" | awk '{\\$1=\"\"; print \\$0}' | xargs)\n        \n        # More robust event type detection\n        event_type=\"\"\n        if [[ \"\\$event_flags\" == *\"Created\"* && \"\\$event_flags\" != *\"AttributeModified\"* && \"\\$event_flags\" != *\"Removed\"* ]]; then\n            event_type=\"Created\"\n        elif [[ \"\\$event_flags\" == *\"AttributeModified\"* && \"\\$event_flags\" != *\"Removed\"* ]]; then\n            event_type=\"Updated\"\n        else\n            event_type=\"Unknown\"\n        fi\n        \n        # Log the parsed event details - Leaving here for debugging\n        # echo \"\\$(date): File: \\$file, Event: \\$event_type, Flags: \\$event_flags\" >> /tmp/meta-json-debug.log\n        \n        # Only process if it's the most recent meta.json or a new one\n        if [ \"\\$file\" != \"\\$LAST_PROCESSED\" ] || [ \"\\$event_type\" = \"Updated\" ]; then\n            process_meta_json \"\\$file\" \"\\$event_type\"\n        fi\n    done\n} || {\n    # This block runs if fswatch fails\n    echo \"\\$(date): ERROR - FSWatch command failed unexpectedly\" >> \"\\$LOG_FILE\"\n    osascript -e \"display notification \\\"FSWatch monitoring failed unexpectedly. Check the logs.\\\" with title \\\"SW Watcher\\\"\"\n}\nEOF\n\n# Make the script executable\nchmod +x $HOME/macrowhisper/sw-watcher\n\n# Load the LaunchAgent\nlaunchctl load ~/Library/LaunchAgents/com.aft.sw-watcher.plist\n\necho \"SW Watcher service installed and started!\"\nosascript -e \"display notification \\\"SW Watcher service installed and started!\\\" with title \\\"SW Watcher\\\"\"\necho \"To stop the service: launchctl unload ~/Library/LaunchAgents/com.aft.sw-watcher.plist\"\necho \"To check logs: cat /tmp/sw-watcher.log\""
				}
			]
		}
	],
	"Name": "Setup - Service",
	"CustomIconData": "KMEC=Rounded=KMCOLOR:0,0,255,0=🔮=86=0=0=1=KMCOLOR:0,0,0,255"
}